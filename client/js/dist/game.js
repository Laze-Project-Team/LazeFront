/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./client/client/js/game/main.js":
/*!***************************************!*\
  !*** ./client/client/js/game/main.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"connect4\": () => (/* binding */ connect4)\n/* harmony export */ });\nvar connection;\r\nvar userId = '';\r\nvar userNum = 0;\r\nlet first = true;\r\nvar connectedUser, myConnection;\r\nlet whenqueued = -1;\r\nlet instance;\r\n\r\nlet lazeCall = (a) => {};\r\nlet lazeCallNoParam = (a) => {};\r\n\r\n//when a user logs in\r\nfunction onLogin(success, id) {\r\n\tif (success === false) {\r\n\t\talert('oops...try a different username');\r\n\t} else {\r\n\t\tuserId = id;\r\n\t\tconsole.log(userId);\r\n\r\n\t\t//creating our RTCPeerConnection object\r\n\r\n\t\tvar configuration = {\r\n\t\t\ticeServers: [{ url: 'stun:stun.1.google.com:19302' }],\r\n\t\t};\r\n\r\n\t\tmyConnection = new webkitRTCPeerConnection(configuration);\r\n\t\tconsole.log('RTCPeerConnection object was created');\r\n\t\tconsole.log(myConnection);\r\n\r\n\t\t//setup ice handling\r\n\t\t//when the browser finds an ice candidate we send it to another peer\r\n\t\tmyConnection.onicecandidate = function (event) {\r\n\t\t\tif (event.candidate) {\r\n\t\t\t\tsend({\r\n\t\t\t\t\ttype: 'candidate',\r\n\t\t\t\t\tcandidate: event.candidate,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n}\r\n\r\n// Alias for sending messages in JSON format\r\nfunction send(message) {\r\n\tif (connectedUser) {\r\n\t\tmessage.name = connectedUser;\r\n\t}\r\n\r\n\tconnection.send(JSON.stringify(message));\r\n}\r\n\r\n//setup a peer connection with another user\r\nfunction connectToUser(otherUsername) {\r\n\tconnectedUser = otherUsername;\r\n\r\n\tif (otherUsername.length > 0) {\r\n\t\t//make an offer\r\n\t\tmyConnection.createOffer(\r\n\t\t\tfunction (offer) {\r\n\t\t\t\tconsole.log();\r\n\t\t\t\tsend({\r\n\t\t\t\t\ttype: 'offer',\r\n\t\t\t\t\toffer: offer,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tmyConnection.setLocalDescription(offer);\r\n\t\t\t},\r\n\t\t\tfunction (error) {\r\n\t\t\t\talert('An error has occurred.');\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\n//when somebody wants to call us\r\nfunction onOffer(offer, name) {\r\n\tuserNum = 2;\r\n\tif (whenqueued > 0) lazeCallNoParam(whenqueued);\r\n\tconnectedUser = name;\r\n\tmyConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n\r\n\tmyConnection.createAnswer(\r\n\t\tfunction (answer) {\r\n\t\t\tmyConnection.setLocalDescription(answer);\r\n\t\t\tsend({\r\n\t\t\t\ttype: 'answer',\r\n\t\t\t\tanswer: answer,\r\n\t\t\t});\r\n\t\t},\r\n\t\tfunction (error) {\r\n\t\t\talert('oops...error');\r\n\t\t}\r\n\t);\r\n}\r\n\r\n//when another user answers to our offer\r\nfunction onAnswer(answer) {\r\n\tuserNum = 1;\r\n\tif (whenqueued > 0) lazeCallNoParam(whenqueued);\r\n\tmyConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n}\r\n\r\n//when we got ice candidate from another user\r\nfunction onCandidate(candidate) {\r\n\tmyConnection.addIceCandidate(new RTCIceCandidate(candidate));\r\n}\r\n\r\nlet eventHandlers = {};\r\nlet eventHandlerAddress = {};\r\n\r\nconst memory = new WebAssembly.Memory({ initial: 17 });\r\nconst c = document.getElementById('game-screen');\r\nconst gl = c.getContext('webgl');\r\nconst vsSource = `\r\n  attribute vec3 aVertexPosition;\r\n  attribute vec2 aTexCoord;\r\n\r\n  uniform mat4 model;\r\n  uniform mat4 projection;\r\n\r\n  varying highp vec2 vTexCoord; \r\n  void main() {\r\n    gl_Position = model * projection * vec4(aVertexPosition, 1.0);\r\n    vTexCoord = aTexCoord;\r\n  }\r\n`;\r\nconst fsSource = `\r\n  varying highp vec2 vTexCoord;\r\n\r\n  uniform sampler2D uSampler;\r\n\r\n  void main() {\r\n    gl_FragColor = texture2D(uSampler, vTexCoord);\r\n  }\r\n`;\r\nconst vsSource1 = `\r\n  attribute vec2 aVertexPosition;\r\n\r\n  uniform mat4 model;\r\n  uniform mat4 projection;\r\n\r\n  void main() {\r\n    gl_Position = model * projection * vec4(aVertexPosition, 0.0, 1.0);\r\n  }\r\n`;\r\nconst fsSource1 = `\r\n uniform highp vec3 objectColor;\r\n uniform highp float transparency;\r\n\r\n  void main() {\r\n    gl_FragColor = vec4(objectColor, transparency);\r\n  }\r\n`;\r\nconst vsCircleSource = `\r\nuniform vec2 u_resolution;\r\nattribute vec2 a_position;\r\nattribute vec2 a_center;\r\nattribute float a_radius;\r\n\r\nvarying vec2 center;\r\nvarying vec2 resolution;\r\nvarying float radius;\r\n \r\nvoid main() {\r\n  vec2 clipspace = a_position / u_resolution * 2.0 - 1.0;\r\n  gl_Position = vec4(clipspace * vec2(1, -1), 0, 1);\r\n  radius = a_radius;\r\n  center = a_center;\r\n  resolution = u_resolution;\r\n}\r\n`;\r\nconst fsCircleSource = `\r\nprecision mediump float;\r\n\r\nvarying vec2 center;\r\nvarying vec2 resolution;\r\nvarying float radius;\r\nvoid main() {\r\n  vec4 color0 = vec4(0.0, 0.0, 0.0, 0.0);\r\n  float x = gl_FragCoord.x;\r\n  float y = resolution[1] - gl_FragCoord.y;\r\n  float dx = center[0] - x;\r\n  float dy = center[1] - y;\r\n  float distance = sqrt(dx*dx + dy*dy);\r\n  if ( distance < radius )\r\n    gl_FragColor = vec4(1.0, 0.5, 0.0, 1.0);\r\n  else \r\n    gl_FragColor = color0;\r\n}\r\n`;\r\n\r\n//WebGLProgram\r\nlet webglPrograms = [];\r\n//WebGLShader\r\nlet webglShaders = [];\r\n//WebGLBuffer\r\nlet webglBuffers = [];\r\nlet webglUniformLoc = [];\r\nlet webglTextures = [];\r\n\r\nlet lastDownTarget;\r\nlet pressedKeys = new Array(256);\r\nlet mousePressed;\r\n\r\nlet memorySize = 0;\r\n\r\nwindow.onload = function () {\r\n\tfor (let i = 0; i < 256; i++) {\r\n\t\tpressedKeys[i] = false;\r\n\t}\r\n\tmousePressed = false;\r\n\tdocument.addEventListener(\r\n\t\t'mousedown',\r\n\t\t(e) => {\r\n\t\t\tmousePressed = true;\r\n\t\t\tlastDownTarget = e.target;\r\n\t\t},\r\n\t\tfalse\r\n\t);\r\n\tdocument.addEventListener(\r\n\t\t'mouseup',\r\n\t\t(e) => {\r\n\t\t\tmousePressed = false;\r\n\t\t},\r\n\t\tfalse\r\n\t);\r\n\tdocument.addEventListener(\r\n\t\t'keydown',\r\n\t\t(e) => {\r\n\t\t\tif (lastDownTarget === c) {\r\n\t\t\t\tpressedKeys[e.keyCode] = true;\r\n\t\t\t}\r\n\t\t},\r\n\t\tfalse\r\n\t);\r\n\tdocument.addEventListener(\r\n\t\t'keyup',\r\n\t\t(e) => {\r\n\t\t\tif (lastDownTarget === c) {\r\n\t\t\t\tpressedKeys[e.keyCode] = false;\r\n\t\t\t}\r\n\t\t},\r\n\t\tfalse\r\n\t);\r\n\tc.addEventListener('mousemove', updatePosition, false);\r\n};\r\n\r\nlet mouseX = 0.0;\r\nlet mouseY = 0.0;\r\n\r\nfunction updatePosition(e) {\r\n\tmouseX = (e.clientX - c.getBoundingClientRect().left - c.clientWidth / 2) / (c.clientWidth / 2);\r\n\tmouseY = -((e.clientY - c.getBoundingClientRect().top - c.clientHeight / 2) / (c.clientHeight / 2));\r\n}\r\n\r\nfunction strToMem(str) {\r\n\tlet resultBytes = new Uint8Array(str.length * 4);\r\n\tlet bytes = new TextEncoder('utf-8').encode(str);\r\n\tfor (let i = 0, j = 0; i < bytes.length; ) {\r\n\t\tresultBytes[j] = bytes[i];\r\n\t\tif (bytes[i] >= 128) {\r\n\t\t\tresultBytes[j + 1] = bytes[i + 1];\r\n\t\t\tresultBytes[j + 2] = bytes[i + 2];\r\n\t\t\tresultBytes[j + 3] = 0;\r\n\t\t\ti += 3;\r\n\t\t\tj += 4;\r\n\t\t} else {\r\n\t\t\tresultBytes[j + 1] = 0;\r\n\t\t\tresultBytes[j + 2] = 0;\r\n\t\t\tresultBytes[j + 3] = 0;\r\n\t\t\ti++;\r\n\t\t\tj += 4;\r\n\t\t}\r\n\t}\r\n\tlet temp = memorySize;\r\n\tlet memoryBuffer = new Uint8Array(memory.buffer, memorySize, 12);\r\n\tmemorySize += 12;\r\n\tmemoryBuffer.set([memorySize, 0, 0, 0, str.length, 0, 0, 0, 0, 0, 0, 0], 0);\r\n\tlet helloBytes = new Uint8Array(memory.buffer, memorySize, str.length * 4);\r\n\thelloBytes.set(resultBytes, 0);\r\n\tmemorySize += str.length * 4;\r\n\tconsole.log(temp);\r\n\treturn temp;\r\n}\r\nfunction connect4(callback) {\r\n\tvar importObject = {\r\n\t\tconsole: {\r\n\t\t\tlog: function (arg) {\r\n\t\t\t\t// var char = new Uint8Array([Math.floor((arg/256)/256), Math.floor((arg%(256*256))/256), Math.floor((arg%(256*256))%256)]);\r\n\t\t\t\t// char = char.filter(char => char != 0);\r\n\t\t\t\t// console.log(new TextDecoder('utf-8').decode(char));\r\n\t\t\t\tconsole.log(Number(arg));\r\n\t\t\t},\r\n\t\t\tlogstring: function (offset, length) {\r\n\t\t\t\tvar bytes = new Uint8Array(memory.buffer, offset, Number(length) * 4);\r\n\t\t\t\tbytes = bytes.filter((element) => element != 0);\r\n\t\t\t\tlet string = new TextDecoder('utf-8').decode(bytes);\r\n\t\t\t\tconsole.log(string);\r\n\t\t\t},\r\n\t\t\tlogMatrix: function (offset) {\r\n\t\t\t\tconst buffer = memory.buffer.slice(offset, 128 + offset);\r\n\t\t\t\tconst f64Array = new Float64Array(buffer);\r\n\t\t\t\tconst f32Array = Float32Array.from(f64Array);\r\n\t\t\t\tconsole.log(f32Array);\r\n\t\t\t},\r\n\t\t},\r\n\t\tperformance: {\r\n\t\t\tnow: function () {\r\n\t\t\t\treturn performance.now();\r\n\t\t\t},\r\n\t\t},\r\n\t\tjs: {\r\n\t\t\tmem: memory,\r\n\t\t\tcheckKeyPress: function (keyCode) {\r\n\t\t\t\treturn BigInt(pressedKeys[keyCode]);\r\n\t\t\t},\r\n\t\t\tcheckMousePress: function () {\r\n\t\t\t\treturn BigInt(mousePressed);\r\n\t\t\t},\r\n\t\t\tcheckMouseX: function () {\r\n\t\t\t\treturn mouseX;\r\n\t\t\t},\r\n\t\t\tcheckMouseY: function () {\r\n\t\t\t\treturn mouseY;\r\n\t\t\t},\r\n\t\t\trand: function () {\r\n\t\t\t\treturn Math.random();\r\n\t\t\t},\r\n\t\t\talloc: function (size) {\r\n\t\t\t\tlet temp = memorySize;\r\n\t\t\t\tmemorySize += size;\r\n\t\t\t\treturn temp;\r\n\t\t\t},\r\n\t\t\tgetHelloWorld: function () {\r\n\t\t\t\treturn strToMem(helloworld);\r\n\t\t\t},\r\n\t\t\tlockPointer: function () {\r\n\t\t\t\tc.requestPointerLock = c.requestPointerLock || c.mozRequestPointerLock;\r\n\t\t\t\tdocument.exitPointerLock = document.exitPointerLock || document.mozExitPointerLock;\r\n\r\n\t\t\t\tc.onclick = function () {\r\n\t\t\t\t\tc.requestPointerLock();\r\n\t\t\t\t};\r\n\r\n\t\t\t\tdocument.addEventListener('pointerlockchange', lockChangeAlert, false);\r\n\t\t\t\tdocument.addEventListener('mozpointerlockchange', lockChangeAlert, false);\r\n\r\n\t\t\t\tfunction lockChangeAlert() {\r\n\t\t\t\t\tif (document.pointerLockElement === canvas || document.mozPointerLockElement === canvas) {\r\n\t\t\t\t\t\tconsole.log('The pointer lock status is now locked');\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.log('The pointer lock status is now unlocked');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tconnectedCallback: callback,\r\n\t\t},\r\n\t\tp2p: {\r\n\t\t\tconnectP2P: function (offset, length, index) {\r\n\t\t\t\tvar bytes = new Uint8Array(memory.buffer, offset, Number(length) * 4);\r\n\t\t\t\tbytes = bytes.filter((element) => element != 0);\r\n\t\t\t\tlet string = new TextDecoder('utf-8').decode(bytes);\r\n\t\t\t\tconnection = new WebSocket(string);\r\n\t\t\t\t//handle messages from the server\r\n\t\t\t\tconnection.onmessage = function (message) {\r\n\t\t\t\t\tvar data = JSON.parse(message.data);\r\n\r\n\t\t\t\t\tswitch (data.type) {\r\n\t\t\t\t\t\tcase 'login':\r\n\t\t\t\t\t\t\tonLogin(data.success, data.userId);\r\n\t\t\t\t\t\t\tlazeCallNoParam(index);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'joinQueue':\r\n\t\t\t\t\t\t\tconnectToUser(data.userId);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'offer':\r\n\t\t\t\t\t\t\tonOffer(data.offer, data.name);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'answer':\r\n\t\t\t\t\t\t\tonAnswer(data.answer);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'candidate':\r\n\t\t\t\t\t\t\tonCandidate(data.candidate);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tif (eventHandlers.hasOwnProperty(data.type)) {\r\n\t\t\t\t\t\t\t\tdataBytes = Uint8Array.from(data.data);\r\n\t\t\t\t\t\t\t\tvar bytes = new Uint8Array(memory.buffer, memorySize, dataBytes.byteLength);\r\n\t\t\t\t\t\t\t\tbytes.set(dataBytes, 0);\r\n\t\t\t\t\t\t\t\tlazeCall(eventHandlers[data.type], memorySize);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// tempFunc(strToMem(data.type));\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tconnection.onopen = function () {\r\n\t\t\t\t\tconsole.log('Connected');\r\n\t\t\t\t\tsend({\r\n\t\t\t\t\t\ttype: 'login',\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\tconnection.onerror = function (err) {\r\n\t\t\t\t\tconsole.log('Got error', err);\r\n\t\t\t\t};\r\n\t\t\t\tfirst = false;\r\n\t\t\t},\r\n\t\t\tjoinRandomQueue: function (index) {\r\n\t\t\t\tsend({\r\n\t\t\t\t\ttype: 'joinQueue',\r\n\t\t\t\t});\r\n\t\t\t\twhenqueued = index;\r\n\t\t\t},\r\n\t\t\taddEventHandler: function (offset, length, funcIndex) {\r\n\t\t\t\tvar bytes = new Uint8Array(memory.buffer, offset, Number(length) * 4);\r\n\t\t\t\tbytes = bytes.filter((element) => element != 0);\r\n\t\t\t\tlet string = new TextDecoder('utf-8').decode(bytes);\r\n\t\t\t\teventHandlers[string] = funcIndex;\r\n\t\t\t},\r\n\t\t\tsend: function (offset, length, objOffset, objLength) {\r\n\t\t\t\tvar bytes = new Uint8Array(memory.buffer, offset, Number(length) * 4);\r\n\t\t\t\tbytes = bytes.filter((element) => element != 0);\r\n\t\t\t\tlet string = new TextDecoder('utf-8').decode(bytes);\r\n\t\t\t\tvar sendData = new Uint8Array(memory.buffer, objOffset, Number(objLength) * 4);\r\n\t\t\t\tsend({\r\n\t\t\t\t\ttype: string,\r\n\t\t\t\t\tdata: Array.from(sendData),\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tgetUserNum: function () {\r\n\t\t\t\treturn userNum;\r\n\t\t\t},\r\n\t\t},\r\n\t\twebgl: {\r\n\t\t\tclearColor: function (r, g, b, a) {\r\n\t\t\t\tgl.clearColor(r, g, b, a);\r\n\t\t\t},\r\n\t\t\tclear: function (i) {\r\n\t\t\t\tgl.clear(i);\r\n\t\t\t},\r\n\t\t\tclearDepth: function (i) {\r\n\t\t\t\tgl.clearDepth(i);\r\n\t\t\t},\r\n\t\t\tdepthFunc: function (i) {\r\n\t\t\t\tgl.depthFunc(i);\r\n\t\t\t},\r\n\t\t\tblendFunc: function (i, j) {\r\n\t\t\t\tgl.blendFunc(i, j);\r\n\t\t\t},\r\n\t\t\tenable: function (i) {\r\n\t\t\t\tgl.enable(i);\r\n\t\t\t},\r\n\t\t\tvertexAttribPointer: function (index, size, type, normalized, stride, offset) {\r\n\t\t\t\tgl.vertexAttribPointer(index, size, type, false, stride, offset);\r\n\t\t\t},\r\n\t\t\tenableVertexAttribArray: function (index) {\r\n\t\t\t\tgl.enableVertexAttribArray(index);\r\n\t\t\t},\r\n\t\t\tdisable: function (i) {\r\n\t\t\t\tgl.disable(i);\r\n\t\t\t},\r\n\t\t\tcreateProgram: function () {\r\n\t\t\t\twebglPrograms.push(gl.createProgram());\r\n\t\t\t\treturn webglPrograms.length - 1;\r\n\t\t\t},\r\n\t\t\tcreateBuffer: function () {\r\n\t\t\t\twebglBuffers.push(gl.createBuffer());\r\n\t\t\t\treturn webglBuffers.length - 1;\r\n\t\t\t},\r\n\t\t\tbindBuffer: function (i, j) {\r\n\t\t\t\tgl.bindBuffer(i, webglBuffers[j]);\r\n\t\t\t},\r\n\t\t\tbufferData: function (i, offset, size, j) {\r\n\t\t\t\tconst buffer = memory.buffer.slice(offset, size * 8 + offset);\r\n\t\t\t\tconst f64Array = new Float64Array(buffer);\r\n\t\t\t\tconst f32Array = Float32Array.from(f64Array);\r\n\t\t\t\tgl.bufferData(i, f32Array, j);\r\n\t\t\t},\r\n\t\t\telementBufferData: function (i, offset, size, j) {\r\n\t\t\t\tconst i32Array = new Uint32Array(memory.buffer, offset, size);\r\n\t\t\t\tconst i16Array = Uint16Array.from(i32Array);\r\n\t\t\t\tconsole.log(i16Array);\r\n\t\t\t\tgl.bufferData(i, i16Array, j);\r\n\t\t\t},\r\n\t\t\tuseProgram: function (i) {\r\n\t\t\t\tgl.useProgram(webglPrograms[i]);\r\n\t\t\t},\r\n\t\t\tgetAttribLocation: function (i, offset, length) {\r\n\t\t\t\tvar bytes = new Uint8Array(memory.buffer, offset, Number(length) * 4);\r\n\t\t\t\t// bytes.reverse();\r\n\t\t\t\tbytes = bytes.filter((element) => element != 0);\r\n\t\t\t\tvar string = new TextDecoder('utf-8').decode(bytes);\r\n\t\t\t\t// string = [...string].reverse().join(\"\");\r\n\t\t\t\treturn gl.getAttribLocation(webglPrograms[i], string);\r\n\t\t\t},\r\n\t\t\tgetUniformLocation: function (i, offset, length) {\r\n\t\t\t\tvar bytes = new Uint8Array(memory.buffer, offset, Number(length) * 4);\r\n\t\t\t\tbytes = bytes.filter((element) => element != 0);\r\n\t\t\t\tvar string = new TextDecoder('utf-8').decode(bytes);\r\n\t\t\t\twebglUniformLoc.push(gl.getUniformLocation(webglPrograms[i], string));\r\n\t\t\t\treturn webglUniformLoc.length - 1;\r\n\t\t\t},\r\n\t\t\tuniformMatrix2fv: function (i, transpose, offset) {\r\n\t\t\t\tconst f64Array = new Float64Array(memory.buffer, offset, 4);\r\n\t\t\t\tconst f32Array = Float32Array.from(f64Array);\r\n\t\t\t\tgl.uniformMatrix2fv(webglUniformLoc[i], transpose, f32Array);\r\n\t\t\t},\r\n\t\t\tuniformMatrix3fv: function (i, transpose, offset) {\r\n\t\t\t\tconst f64Array = new Float64Array(memory.buffer, offset, 9);\r\n\t\t\t\tconst f32Array = Float32Array.from(f64Array);\r\n\t\t\t\tgl.uniformMatrix3fv(webglUniformLoc[i], transpose, f32Array);\r\n\t\t\t},\r\n\t\t\tuniformMatrix4fv: function (i, transpose, offset) {\r\n\t\t\t\tconst buffer = memory.buffer.slice(offset, 128 + offset);\r\n\t\t\t\tconst f64Array = new Float64Array(buffer);\r\n\t\t\t\tconst f32Array = Float32Array.from(f64Array);\r\n\t\t\t\tgl.uniformMatrix4fv(webglUniformLoc[i], transpose, f32Array);\r\n\t\t\t},\r\n\t\t\tuniform1f: function (i, v0) {\r\n\t\t\t\tgl.uniform1f(webglUniformLoc[i], v0);\r\n\t\t\t},\r\n\t\t\tuniform1fv: function (i, v0) {\r\n\t\t\t\tgl.uniform1fv(webglUniformLoc[i], v0);\r\n\t\t\t},\r\n\t\t\tuniform1i: function (i, v0) {\r\n\t\t\t\tgl.uniform1i(webglUniformLoc[i], v0);\r\n\t\t\t},\r\n\t\t\tuniform1iv: function (i, v0) {\r\n\t\t\t\tgl.uniform1iv(webglUniformLoc[i], v0);\r\n\t\t\t},\r\n\r\n\t\t\tuniform2f: function (i, v0, v1) {\r\n\t\t\t\tgl.uniform2f(webglUniformLoc[i], v0, v1);\r\n\t\t\t},\r\n\t\t\tuniform2fv: function (i, v0, v1) {\r\n\t\t\t\tgl.uniform2fv(webglUniformLoc[i], v0, v1);\r\n\t\t\t},\r\n\t\t\tuniform2i: function (i, v0, v1) {\r\n\t\t\t\tgl.uniform2i(webglUniformLoc[i], v0, v1);\r\n\t\t\t},\r\n\t\t\tuniform2iv: function (i, v0, v1) {\r\n\t\t\t\tgl.uniform2iv(webglUniformLoc[i], v0, v1);\r\n\t\t\t},\r\n\r\n\t\t\tuniform3f: function (i, v0, v1, v2) {\r\n\t\t\t\tgl.uniform3f(webglUniformLoc[i], v0, v1, v2);\r\n\t\t\t},\r\n\t\t\tuniform3fv: function (i, v0, v1, v2) {\r\n\t\t\t\tgl.uniform3fv(webglUniformLoc[i], v0, v1, v2);\r\n\t\t\t},\r\n\t\t\tuniform3i: function (i, v0, v1, v2) {\r\n\t\t\t\tgl.uniform3i(webglUniformLoc[i], v0, v1, v2);\r\n\t\t\t},\r\n\t\t\tuniform3iv: function (i, v0, v1, v2) {\r\n\t\t\t\tgl.uniform3iv(webglUniformLoc[i], v0, v1, v2);\r\n\t\t\t},\r\n\r\n\t\t\tuniform4f: function (i, v0, v1, v2, v3) {\r\n\t\t\t\tgl.uniform4f(webglUniformLoc[i], v0, v1, v2, v3);\r\n\t\t\t},\r\n\t\t\tuniform4fv: function (i, v0, v1, v2, v3) {\r\n\t\t\t\tgl.uniform4fv(webglUniformLoc[i], v0, v1, v2, v3);\r\n\t\t\t},\r\n\t\t\tuniform4i: function (i, v0, v1, v2, v3) {\r\n\t\t\t\tgl.uniform4i(webglUniformLoc[i], v0, v1, v2, v3);\r\n\t\t\t},\r\n\t\t\tuniform4iv: function (i, v0, v1, v2, v3) {\r\n\t\t\t\tgl.uniform4iv(webglUniformLoc[i], v0, v1, v2, v3);\r\n\t\t\t},\r\n\t\t\tdrawArrays: function (i, first, count) {\r\n\t\t\t\t// console.log(i);\r\n\t\t\t\tgl.drawArrays(i, first, count);\r\n\t\t\t},\r\n\t\t\tuniform4i: function (i, v0, v1, v2, v3) {\r\n\t\t\t\tgl.uniform4i(webglUniformLoc[i], v0, v1, v2, v3);\r\n\t\t\t},\r\n\t\t\tuniform4iv: function (i, v0, v1, v2, v3) {\r\n\t\t\t\tgl.uniform4iv(webglUniformLoc[i], v0, v1, v2, v3);\r\n\t\t\t},\r\n\t\t\tdrawArrays: function (i, first, count) {\r\n\t\t\t\t// console.log(i);\r\n\t\t\t\tgl.drawArrays(i, first, count);\r\n\t\t\t},\r\n\t\t\tdrawElements: function (i, count, type, offset) {\r\n\t\t\t\tgl.drawElements(i, count, type, offset);\r\n\t\t\t},\r\n\t\t\tloadTexture: function (offset, length) {\r\n\t\t\t\tvar bytes = new Uint8Array(memory.buffer, offset, Number(length) * 4);\r\n\t\t\t\tbytes = bytes.filter((element) => element != 0);\r\n\t\t\t\tvar string = new TextDecoder('utf-8').decode(bytes);\r\n\t\t\t\treturn _loadTexture(gl, string);\r\n\t\t\t},\r\n\t\t\tactiveTexture: function (i) {\r\n\t\t\t\tgl.activeTexture(i);\r\n\t\t\t},\r\n\t\t\tbindTexture: function (i, j) {\r\n\t\t\t\tgl.bindTexture(i, webglTextures[j]);\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n\r\n\t//\r\n\t// Initialize a shader program, so WebGL knows how to draw our data\r\n\t//\r\n\tfunction initShaderProgram(gl, vsSource, fsSource) {\r\n\t\tconst vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n\t\tconst fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n\r\n\t\t// Create the shader program\r\n\r\n\t\tconst shaderProgram = gl.createProgram();\r\n\t\tgl.attachShader(shaderProgram, vertexShader);\r\n\t\tgl.attachShader(shaderProgram, fragmentShader);\r\n\t\tgl.linkProgram(shaderProgram);\r\n\r\n\t\t// If creating the shader program failed, alert\r\n\r\n\t\tif (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n\t\t\talert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\twebglPrograms.push(shaderProgram);\r\n\t\treturn shaderProgram;\r\n\t}\r\n\r\n\t//\r\n\t// creates a shader of the given type, uploads the source and\r\n\t// compiles it.\r\n\t//\r\n\tfunction loadShader(gl, type, source) {\r\n\t\tconst shader = gl.createShader(type);\r\n\r\n\t\t// Send the source to the shader object\r\n\r\n\t\tgl.shaderSource(shader, source);\r\n\r\n\t\t// Compile the shader program\r\n\r\n\t\tgl.compileShader(shader);\r\n\r\n\t\t// See if it compiled successfully\r\n\r\n\t\tif (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n\t\t\tconsole.error('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\r\n\t\t\tgl.deleteShader(shader);\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn shader;\r\n\t}\r\n\r\n\tfunction _loadTexture(gl, url) {\r\n\t\tconst texture = gl.createTexture();\r\n\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n\t\t// Because images have to be downloaded over the internet\r\n\t\t// they might take a moment until they are ready.\r\n\t\t// Until then put a single pixel in the texture so we can\r\n\t\t// use it immediately. When the image has finished downloading\r\n\t\t// we'll update the texture with the contents of the image.\r\n\t\tconst level = 0;\r\n\t\tconst internalFormat = gl.RGBA;\r\n\t\tconst width = 1;\r\n\t\tconst height = 1;\r\n\t\tconst border = 0;\r\n\t\tconst srcFormat = gl.RGBA;\r\n\t\tconst srcType = gl.UNSIGNED_BYTE;\r\n\t\tconst pixel = new Uint8Array([0, 0, 255, 255]); // opaque blue\r\n\t\tgl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, srcFormat, srcType, pixel);\r\n\r\n\t\tconst image = new Image();\r\n\t\timage.onload = function () {\r\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\r\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, level, internalFormat, srcFormat, srcType, image);\r\n\r\n\t\t\t// WebGL1 has different requirements for power of 2 images\r\n\t\t\t// vs non power of 2 images so check if the image is a\r\n\t\t\t// power of 2 in both dimensions.\r\n\t\t\tif (isPowerOf2(image.width) && isPowerOf2(image.height)) {\r\n\t\t\t\t// Yes, it's a power of 2. Generate mips.\r\n\t\t\t\tgl.generateMipmap(gl.TEXTURE_2D);\r\n\t\t\t} else {\r\n\t\t\t\t// No, it's not a power of 2. Turn off mips and set\r\n\t\t\t\t// wrapping to clamp to edge\r\n\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n\t\t\t}\r\n\t\t};\r\n\t\timage.src = url;\r\n\r\n\t\twebglTextures.push(texture);\r\n\t\treturn webglTextures.length - 1;\r\n\t}\r\n\r\n\tfunction isPowerOf2(value) {\r\n\t\treturn (value & (value - 1)) == 0;\r\n\t}\r\n\r\n\tconst draw = () => {\r\n\t\tinstance.exports.loop();\r\n\t};\r\n\r\n\tlet interval;\r\n\r\n\tfetch('./js/game/laze.wasm')\r\n\t\t.then((response) => response.arrayBuffer())\r\n\t\t.then((bytes) => WebAssembly.instantiate(bytes, importObject))\r\n\t\t.then((results) => {\r\n\t\t\tinstance = results.instance;\r\n\t\t\tlazeCall = instance.exports.jsCallListener;\r\n\t\t\tlazeCallNoParam = instance.exports.jsCallListenerNoParam;\r\n\r\n\t\t\tinitShaderProgram(gl, vsSource, fsSource);\r\n\t\t\tinitShaderProgram(gl, vsSource1, fsSource1);\r\n\t\t\tinitShaderProgram(gl, vsCircleSource, fsCircleSource);\r\n\t\t\tvar first = performance.now();\r\n\t\t\t// document.getElementById(\"container\").textContent = instance.exports.main();\r\n\t\t\t// Set the pixel data in the module's memory\r\n\t\t\tmemorySize = instance.exports.memorySize();\r\n\t\t\tinstance.exports.main();\r\n\t\t\tif (instance.exports.loop) setInterval(instance.exports.loop, 1000 / 60);\r\n\t\t\tconsole.log(performance.now() - first, performance.now());\r\n\t\t})\r\n\t\t.catch(console.error);\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://laze-compiler-web/./client/client/js/game/main.js?");

/***/ }),

/***/ "./client/client/js/game.ts":
/*!**********************************!*\
  !*** ./client/client/js/game.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n// 待機中のアニメーション\r\n{\r\n    var lastDiv = document.querySelector('#waiting-screen .animation div:last-child');\r\n    lastDiv.addEventListener('animationend', function () { return document.querySelectorAll('#waiting-screen .animation div').forEach(function (div) { return div.classList.toggle('load'); }); });\r\n}\r\n// ボタン類\r\n{\r\n    var games_1 = __webpack_require__(/*! ./game/main.js */ \"./client/client/js/game/main.js\");\r\n    var btnStart = document.getElementById('start');\r\n    var btnCancel = document.getElementById('cancel');\r\n    var screen_1 = document.querySelector('.game-screen');\r\n    var sceneTransition_1 = function (before, after) {\r\n        screen_1.classList.add('scene-transition');\r\n        setTimeout(function () { return screen_1.classList.replace(before, after); }, 500);\r\n        setTimeout(function () { return screen_1.classList.remove('scene-transition'); }, 1000);\r\n    };\r\n    btnStart.addEventListener('click', function () {\r\n        sceneTransition_1('scene-title', 'scene-waiting');\r\n        document.querySelectorAll('#waiting-screen .animation div').forEach(function (div) {\r\n            div.style.animation = 'none';\r\n            div.offsetHeight;\r\n            // @ts-ignore\r\n            div.style.animation = null;\r\n        });\r\n        games_1.connect4(function () { return sceneTransition_1('scene-waiting', 'scene-game'); });\r\n    });\r\n    btnCancel.addEventListener('click', function () {\r\n        sceneTransition_1('scene-waiting', 'scene-title');\r\n        // games.cancel();\r\n    });\r\n}\r\n\n\n//# sourceURL=webpack://laze-compiler-web/./client/client/js/game.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./client/client/js/game.ts");
/******/ 	
/******/ })()
;