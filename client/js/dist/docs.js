/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/marked/lib/marked.js":
/*!*******************************************!*\
  !*** ./node_modules/marked/lib/marked.js ***!
  \*******************************************/
/***/ (function(module) {

eval("/**\r\n * marked - a markdown parser\r\n * Copyright (c) 2011-2021, Christopher Jeffrey. (MIT Licensed)\r\n * https://github.com/markedjs/marked\r\n */\r\n\r\n/**\r\n * DO NOT EDIT THIS FILE\r\n * The code in this file is generated from files in ./src/\r\n */\r\n\r\n(function (global, factory) {\r\n   true ? module.exports = factory() :\r\n  0;\r\n}(this, (function () { 'use strict';\r\n\r\n  function _defineProperties(target, props) {\r\n    for (var i = 0; i < props.length; i++) {\r\n      var descriptor = props[i];\r\n      descriptor.enumerable = descriptor.enumerable || false;\r\n      descriptor.configurable = true;\r\n      if (\"value\" in descriptor) descriptor.writable = true;\r\n      Object.defineProperty(target, descriptor.key, descriptor);\r\n    }\r\n  }\r\n\r\n  function _createClass(Constructor, protoProps, staticProps) {\r\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\r\n    if (staticProps) _defineProperties(Constructor, staticProps);\r\n    return Constructor;\r\n  }\r\n\r\n  function _unsupportedIterableToArray(o, minLen) {\r\n    if (!o) return;\r\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\r\n    var n = Object.prototype.toString.call(o).slice(8, -1);\r\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\r\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\r\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\r\n  }\r\n\r\n  function _arrayLikeToArray(arr, len) {\r\n    if (len == null || len > arr.length) len = arr.length;\r\n\r\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\r\n\r\n    return arr2;\r\n  }\r\n\r\n  function _createForOfIteratorHelperLoose(o, allowArrayLike) {\r\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\r\n    if (it) return (it = it.call(o)).next.bind(it);\r\n\r\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\r\n      if (it) o = it;\r\n      var i = 0;\r\n      return function () {\r\n        if (i >= o.length) return {\r\n          done: true\r\n        };\r\n        return {\r\n          done: false,\r\n          value: o[i++]\r\n        };\r\n      };\r\n    }\r\n\r\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\r\n  }\r\n\r\n  var defaults$5 = {exports: {}};\r\n\r\n  function getDefaults$1() {\r\n    return {\r\n      baseUrl: null,\r\n      breaks: false,\r\n      extensions: null,\r\n      gfm: true,\r\n      headerIds: true,\r\n      headerPrefix: '',\r\n      highlight: null,\r\n      langPrefix: 'language-',\r\n      mangle: true,\r\n      pedantic: false,\r\n      renderer: null,\r\n      sanitize: false,\r\n      sanitizer: null,\r\n      silent: false,\r\n      smartLists: false,\r\n      smartypants: false,\r\n      tokenizer: null,\r\n      walkTokens: null,\r\n      xhtml: false\r\n    };\r\n  }\r\n\r\n  function changeDefaults$1(newDefaults) {\r\n    defaults$5.exports.defaults = newDefaults;\r\n  }\r\n\r\n  defaults$5.exports = {\r\n    defaults: getDefaults$1(),\r\n    getDefaults: getDefaults$1,\r\n    changeDefaults: changeDefaults$1\r\n  };\r\n\r\n  /**\r\n   * Helpers\r\n   */\r\n  var escapeTest = /[&<>\"']/;\r\n  var escapeReplace = /[&<>\"']/g;\r\n  var escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\r\n  var escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\r\n  var escapeReplacements = {\r\n    '&': '&amp;',\r\n    '<': '&lt;',\r\n    '>': '&gt;',\r\n    '\"': '&quot;',\r\n    \"'\": '&#39;'\r\n  };\r\n\r\n  var getEscapeReplacement = function getEscapeReplacement(ch) {\r\n    return escapeReplacements[ch];\r\n  };\r\n\r\n  function escape$2(html, encode) {\r\n    if (encode) {\r\n      if (escapeTest.test(html)) {\r\n        return html.replace(escapeReplace, getEscapeReplacement);\r\n      }\r\n    } else {\r\n      if (escapeTestNoEncode.test(html)) {\r\n        return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\r\n      }\r\n    }\r\n\r\n    return html;\r\n  }\r\n\r\n  var unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\r\n\r\n  function unescape$1(html) {\r\n    // explicitly match decimal, hex, and named HTML entities\r\n    return html.replace(unescapeTest, function (_, n) {\r\n      n = n.toLowerCase();\r\n      if (n === 'colon') return ':';\r\n\r\n      if (n.charAt(0) === '#') {\r\n        return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\r\n      }\r\n\r\n      return '';\r\n    });\r\n  }\r\n\r\n  var caret = /(^|[^\\[])\\^/g;\r\n\r\n  function edit$1(regex, opt) {\r\n    regex = regex.source || regex;\r\n    opt = opt || '';\r\n    var obj = {\r\n      replace: function replace(name, val) {\r\n        val = val.source || val;\r\n        val = val.replace(caret, '$1');\r\n        regex = regex.replace(name, val);\r\n        return obj;\r\n      },\r\n      getRegex: function getRegex() {\r\n        return new RegExp(regex, opt);\r\n      }\r\n    };\r\n    return obj;\r\n  }\r\n\r\n  var nonWordAndColonTest = /[^\\w:]/g;\r\n  var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\r\n\r\n  function cleanUrl$1(sanitize, base, href) {\r\n    if (sanitize) {\r\n      var prot;\r\n\r\n      try {\r\n        prot = decodeURIComponent(unescape$1(href)).replace(nonWordAndColonTest, '').toLowerCase();\r\n      } catch (e) {\r\n        return null;\r\n      }\r\n\r\n      if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    if (base && !originIndependentUrl.test(href)) {\r\n      href = resolveUrl(base, href);\r\n    }\r\n\r\n    try {\r\n      href = encodeURI(href).replace(/%25/g, '%');\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n\r\n    return href;\r\n  }\r\n\r\n  var baseUrls = {};\r\n  var justDomain = /^[^:]+:\\/*[^/]*$/;\r\n  var protocol = /^([^:]+:)[\\s\\S]*$/;\r\n  var domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\r\n\r\n  function resolveUrl(base, href) {\r\n    if (!baseUrls[' ' + base]) {\r\n      // we can ignore everything in base after the last slash of its path component,\r\n      // but we might need to add _that_\r\n      // https://tools.ietf.org/html/rfc3986#section-3\r\n      if (justDomain.test(base)) {\r\n        baseUrls[' ' + base] = base + '/';\r\n      } else {\r\n        baseUrls[' ' + base] = rtrim$1(base, '/', true);\r\n      }\r\n    }\r\n\r\n    base = baseUrls[' ' + base];\r\n    var relativeBase = base.indexOf(':') === -1;\r\n\r\n    if (href.substring(0, 2) === '//') {\r\n      if (relativeBase) {\r\n        return href;\r\n      }\r\n\r\n      return base.replace(protocol, '$1') + href;\r\n    } else if (href.charAt(0) === '/') {\r\n      if (relativeBase) {\r\n        return href;\r\n      }\r\n\r\n      return base.replace(domain, '$1') + href;\r\n    } else {\r\n      return base + href;\r\n    }\r\n  }\r\n\r\n  var noopTest$1 = {\r\n    exec: function noopTest() {}\r\n  };\r\n\r\n  function merge$2(obj) {\r\n    var i = 1,\r\n        target,\r\n        key;\r\n\r\n    for (; i < arguments.length; i++) {\r\n      target = arguments[i];\r\n\r\n      for (key in target) {\r\n        if (Object.prototype.hasOwnProperty.call(target, key)) {\r\n          obj[key] = target[key];\r\n        }\r\n      }\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  function splitCells$1(tableRow, count) {\r\n    // ensure that every cell-delimiting pipe has a space\r\n    // before it to distinguish it from an escaped pipe\r\n    var row = tableRow.replace(/\\|/g, function (match, offset, str) {\r\n      var escaped = false,\r\n          curr = offset;\r\n\r\n      while (--curr >= 0 && str[curr] === '\\\\') {\r\n        escaped = !escaped;\r\n      }\r\n\r\n      if (escaped) {\r\n        // odd number of slashes means | is escaped\r\n        // so we leave it alone\r\n        return '|';\r\n      } else {\r\n        // add space before unescaped |\r\n        return ' |';\r\n      }\r\n    }),\r\n        cells = row.split(/ \\|/);\r\n    var i = 0;\r\n\r\n    if (cells.length > count) {\r\n      cells.splice(count);\r\n    } else {\r\n      while (cells.length < count) {\r\n        cells.push('');\r\n      }\r\n    }\r\n\r\n    for (; i < cells.length; i++) {\r\n      // leading or trailing whitespace is ignored per the gfm spec\r\n      cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\r\n    }\r\n\r\n    return cells;\r\n  } // Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\r\n  // /c*$/ is vulnerable to REDOS.\r\n  // invert: Remove suffix of non-c chars instead. Default falsey.\r\n\r\n\r\n  function rtrim$1(str, c, invert) {\r\n    var l = str.length;\r\n\r\n    if (l === 0) {\r\n      return '';\r\n    } // Length of suffix matching the invert condition.\r\n\r\n\r\n    var suffLen = 0; // Step left until we fail to match the invert condition.\r\n\r\n    while (suffLen < l) {\r\n      var currChar = str.charAt(l - suffLen - 1);\r\n\r\n      if (currChar === c && !invert) {\r\n        suffLen++;\r\n      } else if (currChar !== c && invert) {\r\n        suffLen++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return str.substr(0, l - suffLen);\r\n  }\r\n\r\n  function findClosingBracket$1(str, b) {\r\n    if (str.indexOf(b[1]) === -1) {\r\n      return -1;\r\n    }\r\n\r\n    var l = str.length;\r\n    var level = 0,\r\n        i = 0;\r\n\r\n    for (; i < l; i++) {\r\n      if (str[i] === '\\\\') {\r\n        i++;\r\n      } else if (str[i] === b[0]) {\r\n        level++;\r\n      } else if (str[i] === b[1]) {\r\n        level--;\r\n\r\n        if (level < 0) {\r\n          return i;\r\n        }\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  function checkSanitizeDeprecation$1(opt) {\r\n    if (opt && opt.sanitize && !opt.silent) {\r\n      console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\r\n    }\r\n  } // copied from https://stackoverflow.com/a/5450113/806777\r\n\r\n\r\n  function repeatString$1(pattern, count) {\r\n    if (count < 1) {\r\n      return '';\r\n    }\r\n\r\n    var result = '';\r\n\r\n    while (count > 1) {\r\n      if (count & 1) {\r\n        result += pattern;\r\n      }\r\n\r\n      count >>= 1;\r\n      pattern += pattern;\r\n    }\r\n\r\n    return result + pattern;\r\n  }\r\n\r\n  var helpers = {\r\n    escape: escape$2,\r\n    unescape: unescape$1,\r\n    edit: edit$1,\r\n    cleanUrl: cleanUrl$1,\r\n    resolveUrl: resolveUrl,\r\n    noopTest: noopTest$1,\r\n    merge: merge$2,\r\n    splitCells: splitCells$1,\r\n    rtrim: rtrim$1,\r\n    findClosingBracket: findClosingBracket$1,\r\n    checkSanitizeDeprecation: checkSanitizeDeprecation$1,\r\n    repeatString: repeatString$1\r\n  };\r\n\r\n  var defaults$4 = defaults$5.exports.defaults;\r\n  var rtrim = helpers.rtrim,\r\n      splitCells = helpers.splitCells,\r\n      _escape = helpers.escape,\r\n      findClosingBracket = helpers.findClosingBracket;\r\n\r\n  function outputLink(cap, link, raw) {\r\n    var href = link.href;\r\n    var title = link.title ? _escape(link.title) : null;\r\n    var text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\r\n\r\n    if (cap[0].charAt(0) !== '!') {\r\n      return {\r\n        type: 'link',\r\n        raw: raw,\r\n        href: href,\r\n        title: title,\r\n        text: text\r\n      };\r\n    } else {\r\n      return {\r\n        type: 'image',\r\n        raw: raw,\r\n        href: href,\r\n        title: title,\r\n        text: _escape(text)\r\n      };\r\n    }\r\n  }\r\n\r\n  function indentCodeCompensation(raw, text) {\r\n    var matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\r\n\r\n    if (matchIndentToCode === null) {\r\n      return text;\r\n    }\r\n\r\n    var indentToCode = matchIndentToCode[1];\r\n    return text.split('\\n').map(function (node) {\r\n      var matchIndentInNode = node.match(/^\\s+/);\r\n\r\n      if (matchIndentInNode === null) {\r\n        return node;\r\n      }\r\n\r\n      var indentInNode = matchIndentInNode[0];\r\n\r\n      if (indentInNode.length >= indentToCode.length) {\r\n        return node.slice(indentToCode.length);\r\n      }\r\n\r\n      return node;\r\n    }).join('\\n');\r\n  }\r\n  /**\r\n   * Tokenizer\r\n   */\r\n\r\n\r\n  var Tokenizer_1 = /*#__PURE__*/function () {\r\n    function Tokenizer(options) {\r\n      this.options = options || defaults$4;\r\n    }\r\n\r\n    var _proto = Tokenizer.prototype;\r\n\r\n    _proto.space = function space(src) {\r\n      var cap = this.rules.block.newline.exec(src);\r\n\r\n      if (cap) {\r\n        if (cap[0].length > 1) {\r\n          return {\r\n            type: 'space',\r\n            raw: cap[0]\r\n          };\r\n        }\r\n\r\n        return {\r\n          raw: '\\n'\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.code = function code(src) {\r\n      var cap = this.rules.block.code.exec(src);\r\n\r\n      if (cap) {\r\n        var text = cap[0].replace(/^ {1,4}/gm, '');\r\n        return {\r\n          type: 'code',\r\n          raw: cap[0],\r\n          codeBlockStyle: 'indented',\r\n          text: !this.options.pedantic ? rtrim(text, '\\n') : text\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.fences = function fences(src) {\r\n      var cap = this.rules.block.fences.exec(src);\r\n\r\n      if (cap) {\r\n        var raw = cap[0];\r\n        var text = indentCodeCompensation(raw, cap[3] || '');\r\n        return {\r\n          type: 'code',\r\n          raw: raw,\r\n          lang: cap[2] ? cap[2].trim() : cap[2],\r\n          text: text\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.heading = function heading(src) {\r\n      var cap = this.rules.block.heading.exec(src);\r\n\r\n      if (cap) {\r\n        var text = cap[2].trim(); // remove trailing #s\r\n\r\n        if (/#$/.test(text)) {\r\n          var trimmed = rtrim(text, '#');\r\n\r\n          if (this.options.pedantic) {\r\n            text = trimmed.trim();\r\n          } else if (!trimmed || / $/.test(trimmed)) {\r\n            // CommonMark requires space before trailing #s\r\n            text = trimmed.trim();\r\n          }\r\n        }\r\n\r\n        return {\r\n          type: 'heading',\r\n          raw: cap[0],\r\n          depth: cap[1].length,\r\n          text: text\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.nptable = function nptable(src) {\r\n      var cap = this.rules.block.nptable.exec(src);\r\n\r\n      if (cap) {\r\n        var item = {\r\n          type: 'table',\r\n          header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\r\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\r\n          cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : [],\r\n          raw: cap[0]\r\n        };\r\n\r\n        if (item.header.length === item.align.length) {\r\n          var l = item.align.length;\r\n          var i;\r\n\r\n          for (i = 0; i < l; i++) {\r\n            if (/^ *-+: *$/.test(item.align[i])) {\r\n              item.align[i] = 'right';\r\n            } else if (/^ *:-+: *$/.test(item.align[i])) {\r\n              item.align[i] = 'center';\r\n            } else if (/^ *:-+ *$/.test(item.align[i])) {\r\n              item.align[i] = 'left';\r\n            } else {\r\n              item.align[i] = null;\r\n            }\r\n          }\r\n\r\n          l = item.cells.length;\r\n\r\n          for (i = 0; i < l; i++) {\r\n            item.cells[i] = splitCells(item.cells[i], item.header.length);\r\n          }\r\n\r\n          return item;\r\n        }\r\n      }\r\n    };\r\n\r\n    _proto.hr = function hr(src) {\r\n      var cap = this.rules.block.hr.exec(src);\r\n\r\n      if (cap) {\r\n        return {\r\n          type: 'hr',\r\n          raw: cap[0]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.blockquote = function blockquote(src) {\r\n      var cap = this.rules.block.blockquote.exec(src);\r\n\r\n      if (cap) {\r\n        var text = cap[0].replace(/^ *> ?/gm, '');\r\n        return {\r\n          type: 'blockquote',\r\n          raw: cap[0],\r\n          text: text\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.list = function list(src) {\r\n      var cap = this.rules.block.list.exec(src);\r\n\r\n      if (cap) {\r\n        var raw = cap[0];\r\n        var bull = cap[2];\r\n        var isordered = bull.length > 1;\r\n        var list = {\r\n          type: 'list',\r\n          raw: raw,\r\n          ordered: isordered,\r\n          start: isordered ? +bull.slice(0, -1) : '',\r\n          loose: false,\r\n          items: []\r\n        }; // Get each top-level item.\r\n\r\n        var itemMatch = cap[0].match(this.rules.block.item);\r\n        var next = false,\r\n            item,\r\n            space,\r\n            bcurr,\r\n            bnext,\r\n            addBack,\r\n            loose,\r\n            istask,\r\n            ischecked,\r\n            endMatch;\r\n        var l = itemMatch.length;\r\n        bcurr = this.rules.block.listItemStart.exec(itemMatch[0]);\r\n\r\n        for (var i = 0; i < l; i++) {\r\n          item = itemMatch[i];\r\n          raw = item;\r\n\r\n          if (!this.options.pedantic) {\r\n            // Determine if current item contains the end of the list\r\n            endMatch = item.match(new RegExp('\\\\n\\\\s*\\\\n {0,' + (bcurr[0].length - 1) + '}\\\\S'));\r\n\r\n            if (endMatch) {\r\n              addBack = item.length - endMatch.index + itemMatch.slice(i + 1).join('\\n').length;\r\n              list.raw = list.raw.substring(0, list.raw.length - addBack);\r\n              item = item.substring(0, endMatch.index);\r\n              raw = item;\r\n              l = i + 1;\r\n            }\r\n          } // Determine whether the next list item belongs here.\r\n          // Backpedal if it does not belong in this list.\r\n\r\n\r\n          if (i !== l - 1) {\r\n            bnext = this.rules.block.listItemStart.exec(itemMatch[i + 1]);\r\n\r\n            if (!this.options.pedantic ? bnext[1].length >= bcurr[0].length || bnext[1].length > 3 : bnext[1].length > bcurr[1].length) {\r\n              // nested list or continuation\r\n              itemMatch.splice(i, 2, itemMatch[i] + (!this.options.pedantic && bnext[1].length < bcurr[0].length && !itemMatch[i].match(/\\n$/) ? '' : '\\n') + itemMatch[i + 1]);\r\n              i--;\r\n              l--;\r\n              continue;\r\n            } else if ( // different bullet style\r\n            !this.options.pedantic || this.options.smartLists ? bnext[2][bnext[2].length - 1] !== bull[bull.length - 1] : isordered === (bnext[2].length === 1)) {\r\n              addBack = itemMatch.slice(i + 1).join('\\n').length;\r\n              list.raw = list.raw.substring(0, list.raw.length - addBack);\r\n              i = l - 1;\r\n            }\r\n\r\n            bcurr = bnext;\r\n          } // Remove the list item's bullet\r\n          // so it is seen as the next token.\r\n\r\n\r\n          space = item.length;\r\n          item = item.replace(/^ *([*+-]|\\d+[.)]) ?/, ''); // Outdent whatever the\r\n          // list item contains. Hacky.\r\n\r\n          if (~item.indexOf('\\n ')) {\r\n            space -= item.length;\r\n            item = !this.options.pedantic ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '') : item.replace(/^ {1,4}/gm, '');\r\n          } // trim item newlines at end\r\n\r\n\r\n          item = rtrim(item, '\\n');\r\n\r\n          if (i !== l - 1) {\r\n            raw = raw + '\\n';\r\n          } // Determine whether item is loose or not.\r\n          // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\r\n          // for discount behavior.\r\n\r\n\r\n          loose = next || /\\n\\n(?!\\s*$)/.test(raw);\r\n\r\n          if (i !== l - 1) {\r\n            next = raw.slice(-2) === '\\n\\n';\r\n            if (!loose) loose = next;\r\n          }\r\n\r\n          if (loose) {\r\n            list.loose = true;\r\n          } // Check for task list items\r\n\r\n\r\n          if (this.options.gfm) {\r\n            istask = /^\\[[ xX]\\] /.test(item);\r\n            ischecked = undefined;\r\n\r\n            if (istask) {\r\n              ischecked = item[1] !== ' ';\r\n              item = item.replace(/^\\[[ xX]\\] +/, '');\r\n            }\r\n          }\r\n\r\n          list.items.push({\r\n            type: 'list_item',\r\n            raw: raw,\r\n            task: istask,\r\n            checked: ischecked,\r\n            loose: loose,\r\n            text: item\r\n          });\r\n        }\r\n\r\n        return list;\r\n      }\r\n    };\r\n\r\n    _proto.html = function html(src) {\r\n      var cap = this.rules.block.html.exec(src);\r\n\r\n      if (cap) {\r\n        return {\r\n          type: this.options.sanitize ? 'paragraph' : 'html',\r\n          raw: cap[0],\r\n          pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\r\n          text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.def = function def(src) {\r\n      var cap = this.rules.block.def.exec(src);\r\n\r\n      if (cap) {\r\n        if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\r\n        var tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\r\n        return {\r\n          type: 'def',\r\n          tag: tag,\r\n          raw: cap[0],\r\n          href: cap[2],\r\n          title: cap[3]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.table = function table(src) {\r\n      var cap = this.rules.block.table.exec(src);\r\n\r\n      if (cap) {\r\n        var item = {\r\n          type: 'table',\r\n          header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\r\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\r\n          cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\r\n        };\r\n\r\n        if (item.header.length === item.align.length) {\r\n          item.raw = cap[0];\r\n          var l = item.align.length;\r\n          var i;\r\n\r\n          for (i = 0; i < l; i++) {\r\n            if (/^ *-+: *$/.test(item.align[i])) {\r\n              item.align[i] = 'right';\r\n            } else if (/^ *:-+: *$/.test(item.align[i])) {\r\n              item.align[i] = 'center';\r\n            } else if (/^ *:-+ *$/.test(item.align[i])) {\r\n              item.align[i] = 'left';\r\n            } else {\r\n              item.align[i] = null;\r\n            }\r\n          }\r\n\r\n          l = item.cells.length;\r\n\r\n          for (i = 0; i < l; i++) {\r\n            item.cells[i] = splitCells(item.cells[i].replace(/^ *\\| *| *\\| *$/g, ''), item.header.length);\r\n          }\r\n\r\n          return item;\r\n        }\r\n      }\r\n    };\r\n\r\n    _proto.lheading = function lheading(src) {\r\n      var cap = this.rules.block.lheading.exec(src);\r\n\r\n      if (cap) {\r\n        return {\r\n          type: 'heading',\r\n          raw: cap[0],\r\n          depth: cap[2].charAt(0) === '=' ? 1 : 2,\r\n          text: cap[1]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.paragraph = function paragraph(src) {\r\n      var cap = this.rules.block.paragraph.exec(src);\r\n\r\n      if (cap) {\r\n        return {\r\n          type: 'paragraph',\r\n          raw: cap[0],\r\n          text: cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.text = function text(src) {\r\n      var cap = this.rules.block.text.exec(src);\r\n\r\n      if (cap) {\r\n        return {\r\n          type: 'text',\r\n          raw: cap[0],\r\n          text: cap[0]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.escape = function escape(src) {\r\n      var cap = this.rules.inline.escape.exec(src);\r\n\r\n      if (cap) {\r\n        return {\r\n          type: 'escape',\r\n          raw: cap[0],\r\n          text: _escape(cap[1])\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.tag = function tag(src, inLink, inRawBlock) {\r\n      var cap = this.rules.inline.tag.exec(src);\r\n\r\n      if (cap) {\r\n        if (!inLink && /^<a /i.test(cap[0])) {\r\n          inLink = true;\r\n        } else if (inLink && /^<\\/a>/i.test(cap[0])) {\r\n          inLink = false;\r\n        }\r\n\r\n        if (!inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\r\n          inRawBlock = true;\r\n        } else if (inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\r\n          inRawBlock = false;\r\n        }\r\n\r\n        return {\r\n          type: this.options.sanitize ? 'text' : 'html',\r\n          raw: cap[0],\r\n          inLink: inLink,\r\n          inRawBlock: inRawBlock,\r\n          text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.link = function link(src) {\r\n      var cap = this.rules.inline.link.exec(src);\r\n\r\n      if (cap) {\r\n        var trimmedUrl = cap[2].trim();\r\n\r\n        if (!this.options.pedantic && /^</.test(trimmedUrl)) {\r\n          // commonmark requires matching angle brackets\r\n          if (!/>$/.test(trimmedUrl)) {\r\n            return;\r\n          } // ending angle bracket cannot be escaped\r\n\r\n\r\n          var rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\r\n\r\n          if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\r\n            return;\r\n          }\r\n        } else {\r\n          // find closing parenthesis\r\n          var lastParenIndex = findClosingBracket(cap[2], '()');\r\n\r\n          if (lastParenIndex > -1) {\r\n            var start = cap[0].indexOf('!') === 0 ? 5 : 4;\r\n            var linkLen = start + cap[1].length + lastParenIndex;\r\n            cap[2] = cap[2].substring(0, lastParenIndex);\r\n            cap[0] = cap[0].substring(0, linkLen).trim();\r\n            cap[3] = '';\r\n          }\r\n        }\r\n\r\n        var href = cap[2];\r\n        var title = '';\r\n\r\n        if (this.options.pedantic) {\r\n          // split pedantic href and title\r\n          var link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\r\n\r\n          if (link) {\r\n            href = link[1];\r\n            title = link[3];\r\n          }\r\n        } else {\r\n          title = cap[3] ? cap[3].slice(1, -1) : '';\r\n        }\r\n\r\n        href = href.trim();\r\n\r\n        if (/^</.test(href)) {\r\n          if (this.options.pedantic && !/>$/.test(trimmedUrl)) {\r\n            // pedantic allows starting angle bracket without ending angle bracket\r\n            href = href.slice(1);\r\n          } else {\r\n            href = href.slice(1, -1);\r\n          }\r\n        }\r\n\r\n        return outputLink(cap, {\r\n          href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\r\n          title: title ? title.replace(this.rules.inline._escapes, '$1') : title\r\n        }, cap[0]);\r\n      }\r\n    };\r\n\r\n    _proto.reflink = function reflink(src, links) {\r\n      var cap;\r\n\r\n      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\r\n        var link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\r\n        link = links[link.toLowerCase()];\r\n\r\n        if (!link || !link.href) {\r\n          var text = cap[0].charAt(0);\r\n          return {\r\n            type: 'text',\r\n            raw: text,\r\n            text: text\r\n          };\r\n        }\r\n\r\n        return outputLink(cap, link, cap[0]);\r\n      }\r\n    };\r\n\r\n    _proto.emStrong = function emStrong(src, maskedSrc, prevChar) {\r\n      if (prevChar === void 0) {\r\n        prevChar = '';\r\n      }\r\n\r\n      var match = this.rules.inline.emStrong.lDelim.exec(src);\r\n      if (!match) return; // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\r\n\r\n      if (match[3] && prevChar.match(/(?:[0-9A-Za-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u0660-\\u0669\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08C7\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0966-\\u096F\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09E6-\\u09F1\\u09F4-\\u09F9\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A6F\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AE6-\\u0AEF\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B6F\\u0B71-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0BE6-\\u0BF2\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D58-\\u0D61\\u0D66-\\u0D78\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DE6-\\u0DEF\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F20-\\u0F33\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F-\\u1049\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u1090-\\u1099\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1369-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B50-\\u1B59\\u1B83-\\u1BA0\\u1BAE-\\u1BE5\\u1C00-\\u1C23\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3192-\\u3195\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\u9FFC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7CA\\uA7F5-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA830-\\uA835\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uA9E0-\\uA9E4\\uA9E6-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE1-\\uDEFB\\uDF00-\\uDF23\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC76\\uDC79-\\uDC9E\\uDCA7-\\uDCAF\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDD1B\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE40-\\uDE48\\uDE60-\\uDE7E\\uDE80-\\uDE9F\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDEEB-\\uDEEF\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF91\\uDFA9-\\uDFAF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDD23\\uDD30-\\uDD39\\uDE60-\\uDE7E\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF27\\uDF30-\\uDF45\\uDF51-\\uDF54\\uDFB0-\\uDFCB\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC52-\\uDC6F\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD03-\\uDD26\\uDD36-\\uDD3F\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDD0-\\uDDDA\\uDDDC\\uDDE1-\\uDDF4\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDEF0-\\uDEF9\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC50-\\uDC59\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEAA\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF30-\\uDF3B]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCF2\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDD50-\\uDD59\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC50-\\uDC6C\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF2\\uDFB0\\uDFC0-\\uDFD4]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE96\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD834[\\uDEE0-\\uDEF3\\uDF60-\\uDF78]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDEC0-\\uDEEB\\uDEF0-\\uDEF9]|\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCCF\\uDD00-\\uDD43\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDC71-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDCB4\\uDD01-\\uDD2D\\uDD2F-\\uDD3D\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD00-\\uDD0C]|\\uD83E[\\uDFF0-\\uDFF9]|\\uD869[\\uDC00-\\uDEDD\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A])/)) return;\r\n      var nextChar = match[1] || match[2] || '';\r\n\r\n      if (!nextChar || nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))) {\r\n        var lLength = match[0].length - 1;\r\n        var rDelim,\r\n            rLength,\r\n            delimTotal = lLength,\r\n            midDelimTotal = 0;\r\n        var endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\r\n        endReg.lastIndex = 0; // Clip maskedSrc to same section of string as src (move to lexer?)\r\n\r\n        maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\r\n\r\n        while ((match = endReg.exec(maskedSrc)) != null) {\r\n          rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\r\n          if (!rDelim) continue; // skip single * in __abc*abc__\r\n\r\n          rLength = rDelim.length;\r\n\r\n          if (match[3] || match[4]) {\r\n            // found another Left Delim\r\n            delimTotal += rLength;\r\n            continue;\r\n          } else if (match[5] || match[6]) {\r\n            // either Left or Right Delim\r\n            if (lLength % 3 && !((lLength + rLength) % 3)) {\r\n              midDelimTotal += rLength;\r\n              continue; // CommonMark Emphasis Rules 9-10\r\n            }\r\n          }\r\n\r\n          delimTotal -= rLength;\r\n          if (delimTotal > 0) continue; // Haven't found enough closing delimiters\r\n          // Remove extra characters. *a*** -> *a*\r\n\r\n          rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal); // Create `em` if smallest delimiter has odd char count. *a***\r\n\r\n          if (Math.min(lLength, rLength) % 2) {\r\n            return {\r\n              type: 'em',\r\n              raw: src.slice(0, lLength + match.index + rLength + 1),\r\n              text: src.slice(1, lLength + match.index + rLength)\r\n            };\r\n          } // Create 'strong' if smallest delimiter has even char count. **a***\r\n\r\n\r\n          return {\r\n            type: 'strong',\r\n            raw: src.slice(0, lLength + match.index + rLength + 1),\r\n            text: src.slice(2, lLength + match.index + rLength - 1)\r\n          };\r\n        }\r\n      }\r\n    };\r\n\r\n    _proto.codespan = function codespan(src) {\r\n      var cap = this.rules.inline.code.exec(src);\r\n\r\n      if (cap) {\r\n        var text = cap[2].replace(/\\n/g, ' ');\r\n        var hasNonSpaceChars = /[^ ]/.test(text);\r\n        var hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\r\n\r\n        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\r\n          text = text.substring(1, text.length - 1);\r\n        }\r\n\r\n        text = _escape(text, true);\r\n        return {\r\n          type: 'codespan',\r\n          raw: cap[0],\r\n          text: text\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.br = function br(src) {\r\n      var cap = this.rules.inline.br.exec(src);\r\n\r\n      if (cap) {\r\n        return {\r\n          type: 'br',\r\n          raw: cap[0]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.del = function del(src) {\r\n      var cap = this.rules.inline.del.exec(src);\r\n\r\n      if (cap) {\r\n        return {\r\n          type: 'del',\r\n          raw: cap[0],\r\n          text: cap[2]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.autolink = function autolink(src, mangle) {\r\n      var cap = this.rules.inline.autolink.exec(src);\r\n\r\n      if (cap) {\r\n        var text, href;\r\n\r\n        if (cap[2] === '@') {\r\n          text = _escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\r\n          href = 'mailto:' + text;\r\n        } else {\r\n          text = _escape(cap[1]);\r\n          href = text;\r\n        }\r\n\r\n        return {\r\n          type: 'link',\r\n          raw: cap[0],\r\n          text: text,\r\n          href: href,\r\n          tokens: [{\r\n            type: 'text',\r\n            raw: text,\r\n            text: text\r\n          }]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.url = function url(src, mangle) {\r\n      var cap;\r\n\r\n      if (cap = this.rules.inline.url.exec(src)) {\r\n        var text, href;\r\n\r\n        if (cap[2] === '@') {\r\n          text = _escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\r\n          href = 'mailto:' + text;\r\n        } else {\r\n          // do extended autolink path validation\r\n          var prevCapZero;\r\n\r\n          do {\r\n            prevCapZero = cap[0];\r\n            cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\r\n          } while (prevCapZero !== cap[0]);\r\n\r\n          text = _escape(cap[0]);\r\n\r\n          if (cap[1] === 'www.') {\r\n            href = 'http://' + text;\r\n          } else {\r\n            href = text;\r\n          }\r\n        }\r\n\r\n        return {\r\n          type: 'link',\r\n          raw: cap[0],\r\n          text: text,\r\n          href: href,\r\n          tokens: [{\r\n            type: 'text',\r\n            raw: text,\r\n            text: text\r\n          }]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.inlineText = function inlineText(src, inRawBlock, smartypants) {\r\n      var cap = this.rules.inline.text.exec(src);\r\n\r\n      if (cap) {\r\n        var text;\r\n\r\n        if (inRawBlock) {\r\n          text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0];\r\n        } else {\r\n          text = _escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\r\n        }\r\n\r\n        return {\r\n          type: 'text',\r\n          raw: cap[0],\r\n          text: text\r\n        };\r\n      }\r\n    };\r\n\r\n    return Tokenizer;\r\n  }();\r\n\r\n  var noopTest = helpers.noopTest,\r\n      edit = helpers.edit,\r\n      merge$1 = helpers.merge;\r\n  /**\r\n   * Block-Level Grammar\r\n   */\r\n\r\n  var block$1 = {\r\n    newline: /^(?: *(?:\\n|$))+/,\r\n    code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\r\n    fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?:\\n+|$)|$)/,\r\n    hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\r\n    heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\r\n    blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\r\n    list: /^( {0,3})(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?! {0,3}bull )\\n*|\\s*$)/,\r\n    html: '^ {0,3}(?:' // optional indentation\r\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\r\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\r\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\r\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\r\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\r\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\r\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\r\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\r\n    + ')',\r\n    def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,\r\n    nptable: noopTest,\r\n    table: noopTest,\r\n    lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\r\n    // regex template, placeholders will be replaced according to different paragraph\r\n    // interruption rules of commonmark and the original markdown spec:\r\n    _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html| +\\n)[^\\n]+)*)/,\r\n    text: /^[^\\n]+/\r\n  };\r\n  block$1._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/;\r\n  block$1._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\r\n  block$1.def = edit(block$1.def).replace('label', block$1._label).replace('title', block$1._title).getRegex();\r\n  block$1.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\r\n  block$1.item = /^( *)(bull) ?[^\\n]*(?:\\n(?! *bull ?)[^\\n]*)*/;\r\n  block$1.item = edit(block$1.item, 'gm').replace(/bull/g, block$1.bullet).getRegex();\r\n  block$1.listItemStart = edit(/^( *)(bull) */).replace('bull', block$1.bullet).getRegex();\r\n  block$1.list = edit(block$1.list).replace(/bull/g, block$1.bullet).replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))').replace('def', '\\\\n+(?=' + block$1.def.source + ')').getRegex();\r\n  block$1._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';\r\n  block$1._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\r\n  block$1.html = edit(block$1.html, 'i').replace('comment', block$1._comment).replace('tag', block$1._tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\r\n  block$1.paragraph = edit(block$1._paragraph).replace('hr', block$1.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\r\n  .replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\r\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block$1._tag) // pars can be interrupted by type (6) html blocks\r\n  .getRegex();\r\n  block$1.blockquote = edit(block$1.blockquote).replace('paragraph', block$1.paragraph).getRegex();\r\n  /**\r\n   * Normal Block Grammar\r\n   */\r\n\r\n  block$1.normal = merge$1({}, block$1);\r\n  /**\r\n   * GFM Block Grammar\r\n   */\r\n\r\n  block$1.gfm = merge$1({}, block$1.normal, {\r\n    nptable: '^ *([^|\\\\n ].*\\\\|.*)\\\\n' // Header\r\n    + ' {0,3}([-:]+ *\\\\|[-| :]*)' // Align\r\n    + '(?:\\\\n((?:(?!\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)',\r\n    // Cells\r\n    table: '^ *\\\\|(.+)\\\\n' // Header\r\n    + ' {0,3}\\\\|?( *[-:]+[-| :]*)' // Align\r\n    + '(?:\\\\n *((?:(?!\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\r\n\r\n  });\r\n  block$1.gfm.nptable = edit(block$1.gfm.nptable).replace('hr', block$1.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\r\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block$1._tag) // tables can be interrupted by type (6) html blocks\r\n  .getRegex();\r\n  block$1.gfm.table = edit(block$1.gfm.table).replace('hr', block$1.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\r\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block$1._tag) // tables can be interrupted by type (6) html blocks\r\n  .getRegex();\r\n  /**\r\n   * Pedantic grammar (original John Gruber's loose markdown specification)\r\n   */\r\n\r\n  block$1.pedantic = merge$1({}, block$1.normal, {\r\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\r\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', block$1._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\r\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\r\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\r\n    fences: noopTest,\r\n    // fences not supported\r\n    paragraph: edit(block$1.normal._paragraph).replace('hr', block$1.hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', block$1.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()\r\n  });\r\n  /**\r\n   * Inline-Level Grammar\r\n   */\r\n\r\n  var inline$1 = {\r\n    escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\r\n    autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\r\n    url: noopTest,\r\n    tag: '^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\r\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\r\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\r\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\r\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\r\n    // CDATA section\r\n    link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\r\n    reflink: /^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,\r\n    nolink: /^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,\r\n    reflinkSearch: 'reflink|nolink(?!\\\\()',\r\n    emStrong: {\r\n      lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\r\n      //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\r\n      //        () Skip other delimiter (1) #***                   (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\r\n      rDelimAst: /\\_\\_[^_*]*?\\*[^_*]*?\\_\\_|[punct_](\\*+)(?=[\\s]|$)|[^punct*_\\s](\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|[^punct*_\\s](\\*+)(?=[^punct*_\\s])/,\r\n      rDelimUnd: /\\*\\*[^_*]*?\\_[^_*]*?\\*\\*|[punct*](\\_+)(?=[\\s]|$)|[^punct*_\\s](\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\r\n\r\n    },\r\n    code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\r\n    br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\r\n    del: noopTest,\r\n    text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\r\n    punctuation: /^([\\spunctuation])/\r\n  }; // list of punctuation marks from CommonMark spec\r\n  // without * and _ to handle the different emphasis markers * and _\r\n\r\n  inline$1._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\r\n  inline$1.punctuation = edit(inline$1.punctuation).replace(/punctuation/g, inline$1._punctuation).getRegex(); // sequences em should skip over [title](link), `code`, <html>\r\n\r\n  inline$1.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\r\n  inline$1.escapedEmSt = /\\\\\\*|\\\\_/g;\r\n  inline$1._comment = edit(block$1._comment).replace('(?:-->|$)', '-->').getRegex();\r\n  inline$1.emStrong.lDelim = edit(inline$1.emStrong.lDelim).replace(/punct/g, inline$1._punctuation).getRegex();\r\n  inline$1.emStrong.rDelimAst = edit(inline$1.emStrong.rDelimAst, 'g').replace(/punct/g, inline$1._punctuation).getRegex();\r\n  inline$1.emStrong.rDelimUnd = edit(inline$1.emStrong.rDelimUnd, 'g').replace(/punct/g, inline$1._punctuation).getRegex();\r\n  inline$1._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\r\n  inline$1._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\r\n  inline$1._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\r\n  inline$1.autolink = edit(inline$1.autolink).replace('scheme', inline$1._scheme).replace('email', inline$1._email).getRegex();\r\n  inline$1._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\r\n  inline$1.tag = edit(inline$1.tag).replace('comment', inline$1._comment).replace('attribute', inline$1._attribute).getRegex();\r\n  inline$1._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\r\n  inline$1._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\r\n  inline$1._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\r\n  inline$1.link = edit(inline$1.link).replace('label', inline$1._label).replace('href', inline$1._href).replace('title', inline$1._title).getRegex();\r\n  inline$1.reflink = edit(inline$1.reflink).replace('label', inline$1._label).getRegex();\r\n  inline$1.reflinkSearch = edit(inline$1.reflinkSearch, 'g').replace('reflink', inline$1.reflink).replace('nolink', inline$1.nolink).getRegex();\r\n  /**\r\n   * Normal Inline Grammar\r\n   */\r\n\r\n  inline$1.normal = merge$1({}, inline$1);\r\n  /**\r\n   * Pedantic Inline Grammar\r\n   */\r\n\r\n  inline$1.pedantic = merge$1({}, inline$1.normal, {\r\n    strong: {\r\n      start: /^__|\\*\\*/,\r\n      middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\r\n      endAst: /\\*\\*(?!\\*)/g,\r\n      endUnd: /__(?!_)/g\r\n    },\r\n    em: {\r\n      start: /^_|\\*/,\r\n      middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\r\n      endAst: /\\*(?!\\*)/g,\r\n      endUnd: /_(?!_)/g\r\n    },\r\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', inline$1._label).getRegex(),\r\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', inline$1._label).getRegex()\r\n  });\r\n  /**\r\n   * GFM Inline Grammar\r\n   */\r\n\r\n  inline$1.gfm = merge$1({}, inline$1.normal, {\r\n    escape: edit(inline$1.escape).replace('])', '~|])').getRegex(),\r\n    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\r\n    url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\r\n    _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\r\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\r\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\r\n  });\r\n  inline$1.gfm.url = edit(inline$1.gfm.url, 'i').replace('email', inline$1.gfm._extended_email).getRegex();\r\n  /**\r\n   * GFM + Line Breaks Inline Grammar\r\n   */\r\n\r\n  inline$1.breaks = merge$1({}, inline$1.gfm, {\r\n    br: edit(inline$1.br).replace('{2,}', '*').getRegex(),\r\n    text: edit(inline$1.gfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\r\n  });\r\n  var rules = {\r\n    block: block$1,\r\n    inline: inline$1\r\n  };\r\n\r\n  var Tokenizer$1 = Tokenizer_1;\r\n  var defaults$3 = defaults$5.exports.defaults;\r\n  var block = rules.block,\r\n      inline = rules.inline;\r\n  var repeatString = helpers.repeatString;\r\n  /**\r\n   * smartypants text replacement\r\n   */\r\n\r\n  function smartypants(text) {\r\n    return text // em-dashes\r\n    .replace(/---/g, \"\\u2014\") // en-dashes\r\n    .replace(/--/g, \"\\u2013\") // opening singles\r\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, \"$1\\u2018\") // closing singles & apostrophes\r\n    .replace(/'/g, \"\\u2019\") // opening doubles\r\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, \"$1\\u201C\") // closing doubles\r\n    .replace(/\"/g, \"\\u201D\") // ellipses\r\n    .replace(/\\.{3}/g, \"\\u2026\");\r\n  }\r\n  /**\r\n   * mangle email addresses\r\n   */\r\n\r\n\r\n  function mangle(text) {\r\n    var out = '',\r\n        i,\r\n        ch;\r\n    var l = text.length;\r\n\r\n    for (i = 0; i < l; i++) {\r\n      ch = text.charCodeAt(i);\r\n\r\n      if (Math.random() > 0.5) {\r\n        ch = 'x' + ch.toString(16);\r\n      }\r\n\r\n      out += '&#' + ch + ';';\r\n    }\r\n\r\n    return out;\r\n  }\r\n  /**\r\n   * Block Lexer\r\n   */\r\n\r\n\r\n  var Lexer_1 = /*#__PURE__*/function () {\r\n    function Lexer(options) {\r\n      this.tokens = [];\r\n      this.tokens.links = Object.create(null);\r\n      this.options = options || defaults$3;\r\n      this.options.tokenizer = this.options.tokenizer || new Tokenizer$1();\r\n      this.tokenizer = this.options.tokenizer;\r\n      this.tokenizer.options = this.options;\r\n      var rules = {\r\n        block: block.normal,\r\n        inline: inline.normal\r\n      };\r\n\r\n      if (this.options.pedantic) {\r\n        rules.block = block.pedantic;\r\n        rules.inline = inline.pedantic;\r\n      } else if (this.options.gfm) {\r\n        rules.block = block.gfm;\r\n\r\n        if (this.options.breaks) {\r\n          rules.inline = inline.breaks;\r\n        } else {\r\n          rules.inline = inline.gfm;\r\n        }\r\n      }\r\n\r\n      this.tokenizer.rules = rules;\r\n    }\r\n    /**\r\n     * Expose Rules\r\n     */\r\n\r\n\r\n    /**\r\n     * Static Lex Method\r\n     */\r\n    Lexer.lex = function lex(src, options) {\r\n      var lexer = new Lexer(options);\r\n      return lexer.lex(src);\r\n    }\r\n    /**\r\n     * Static Lex Inline Method\r\n     */\r\n    ;\r\n\r\n    Lexer.lexInline = function lexInline(src, options) {\r\n      var lexer = new Lexer(options);\r\n      return lexer.inlineTokens(src);\r\n    }\r\n    /**\r\n     * Preprocessing\r\n     */\r\n    ;\r\n\r\n    var _proto = Lexer.prototype;\r\n\r\n    _proto.lex = function lex(src) {\r\n      src = src.replace(/\\r\\n|\\r/g, '\\n').replace(/\\t/g, '    ');\r\n      this.blockTokens(src, this.tokens, true);\r\n      this.inline(this.tokens);\r\n      return this.tokens;\r\n    }\r\n    /**\r\n     * Lexing\r\n     */\r\n    ;\r\n\r\n    _proto.blockTokens = function blockTokens(src, tokens, top) {\r\n      var _this = this;\r\n\r\n      if (tokens === void 0) {\r\n        tokens = [];\r\n      }\r\n\r\n      if (top === void 0) {\r\n        top = true;\r\n      }\r\n\r\n      if (this.options.pedantic) {\r\n        src = src.replace(/^ +$/gm, '');\r\n      }\r\n\r\n      var token, i, l, lastToken, cutSrc, lastParagraphClipped;\r\n\r\n      while (src) {\r\n        if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(function (extTokenizer) {\r\n          if (token = extTokenizer.call(_this, src, tokens)) {\r\n            src = src.substring(token.raw.length);\r\n            tokens.push(token);\r\n            return true;\r\n          }\r\n\r\n          return false;\r\n        })) {\r\n          continue;\r\n        } // newline\r\n\r\n\r\n        if (token = this.tokenizer.space(src)) {\r\n          src = src.substring(token.raw.length);\r\n\r\n          if (token.type) {\r\n            tokens.push(token);\r\n          }\r\n\r\n          continue;\r\n        } // code\r\n\r\n\r\n        if (token = this.tokenizer.code(src)) {\r\n          src = src.substring(token.raw.length);\r\n          lastToken = tokens[tokens.length - 1]; // An indented code block cannot interrupt a paragraph.\r\n\r\n          if (lastToken && lastToken.type === 'paragraph') {\r\n            lastToken.raw += '\\n' + token.raw;\r\n            lastToken.text += '\\n' + token.text;\r\n          } else {\r\n            tokens.push(token);\r\n          }\r\n\r\n          continue;\r\n        } // fences\r\n\r\n\r\n        if (token = this.tokenizer.fences(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // heading\r\n\r\n\r\n        if (token = this.tokenizer.heading(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // table no leading pipe (gfm)\r\n\r\n\r\n        if (token = this.tokenizer.nptable(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // hr\r\n\r\n\r\n        if (token = this.tokenizer.hr(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // blockquote\r\n\r\n\r\n        if (token = this.tokenizer.blockquote(src)) {\r\n          src = src.substring(token.raw.length);\r\n          token.tokens = this.blockTokens(token.text, [], top);\r\n          tokens.push(token);\r\n          continue;\r\n        } // list\r\n\r\n\r\n        if (token = this.tokenizer.list(src)) {\r\n          src = src.substring(token.raw.length);\r\n          l = token.items.length;\r\n\r\n          for (i = 0; i < l; i++) {\r\n            token.items[i].tokens = this.blockTokens(token.items[i].text, [], false);\r\n          }\r\n\r\n          tokens.push(token);\r\n          continue;\r\n        } // html\r\n\r\n\r\n        if (token = this.tokenizer.html(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // def\r\n\r\n\r\n        if (top && (token = this.tokenizer.def(src))) {\r\n          src = src.substring(token.raw.length);\r\n\r\n          if (!this.tokens.links[token.tag]) {\r\n            this.tokens.links[token.tag] = {\r\n              href: token.href,\r\n              title: token.title\r\n            };\r\n          }\r\n\r\n          continue;\r\n        } // table (gfm)\r\n\r\n\r\n        if (token = this.tokenizer.table(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // lheading\r\n\r\n\r\n        if (token = this.tokenizer.lheading(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // top-level paragraph\r\n        // prevent paragraph consuming extensions by clipping 'src' to extension start\r\n\r\n\r\n        cutSrc = src;\r\n\r\n        if (this.options.extensions && this.options.extensions.startBlock) {\r\n          (function () {\r\n            var startIndex = Infinity;\r\n            var tempSrc = src.slice(1);\r\n            var tempStart = void 0;\r\n\r\n            _this.options.extensions.startBlock.forEach(function (getStartIndex) {\r\n              tempStart = getStartIndex.call(this, tempSrc);\r\n\r\n              if (typeof tempStart === 'number' && tempStart >= 0) {\r\n                startIndex = Math.min(startIndex, tempStart);\r\n              }\r\n            });\r\n\r\n            if (startIndex < Infinity && startIndex >= 0) {\r\n              cutSrc = src.substring(0, startIndex + 1);\r\n            }\r\n          })();\r\n        }\r\n\r\n        if (top && (token = this.tokenizer.paragraph(cutSrc))) {\r\n          lastToken = tokens[tokens.length - 1];\r\n\r\n          if (lastParagraphClipped && lastToken.type === 'paragraph') {\r\n            lastToken.raw += '\\n' + token.raw;\r\n            lastToken.text += '\\n' + token.text;\r\n          } else {\r\n            tokens.push(token);\r\n          }\r\n\r\n          lastParagraphClipped = cutSrc.length !== src.length;\r\n          src = src.substring(token.raw.length);\r\n          continue;\r\n        } // text\r\n\r\n\r\n        if (token = this.tokenizer.text(src)) {\r\n          src = src.substring(token.raw.length);\r\n          lastToken = tokens[tokens.length - 1];\r\n\r\n          if (lastToken && lastToken.type === 'text') {\r\n            lastToken.raw += '\\n' + token.raw;\r\n            lastToken.text += '\\n' + token.text;\r\n          } else {\r\n            tokens.push(token);\r\n          }\r\n\r\n          continue;\r\n        }\r\n\r\n        if (src) {\r\n          var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\r\n\r\n          if (this.options.silent) {\r\n            console.error(errMsg);\r\n            break;\r\n          } else {\r\n            throw new Error(errMsg);\r\n          }\r\n        }\r\n      }\r\n\r\n      return tokens;\r\n    };\r\n\r\n    _proto.inline = function inline(tokens) {\r\n      var i, j, k, l2, row, token;\r\n      var l = tokens.length;\r\n\r\n      for (i = 0; i < l; i++) {\r\n        token = tokens[i];\r\n\r\n        switch (token.type) {\r\n          case 'paragraph':\r\n          case 'text':\r\n          case 'heading':\r\n            {\r\n              token.tokens = [];\r\n              this.inlineTokens(token.text, token.tokens);\r\n              break;\r\n            }\r\n\r\n          case 'table':\r\n            {\r\n              token.tokens = {\r\n                header: [],\r\n                cells: []\r\n              }; // header\r\n\r\n              l2 = token.header.length;\r\n\r\n              for (j = 0; j < l2; j++) {\r\n                token.tokens.header[j] = [];\r\n                this.inlineTokens(token.header[j], token.tokens.header[j]);\r\n              } // cells\r\n\r\n\r\n              l2 = token.cells.length;\r\n\r\n              for (j = 0; j < l2; j++) {\r\n                row = token.cells[j];\r\n                token.tokens.cells[j] = [];\r\n\r\n                for (k = 0; k < row.length; k++) {\r\n                  token.tokens.cells[j][k] = [];\r\n                  this.inlineTokens(row[k], token.tokens.cells[j][k]);\r\n                }\r\n              }\r\n\r\n              break;\r\n            }\r\n\r\n          case 'blockquote':\r\n            {\r\n              this.inline(token.tokens);\r\n              break;\r\n            }\r\n\r\n          case 'list':\r\n            {\r\n              l2 = token.items.length;\r\n\r\n              for (j = 0; j < l2; j++) {\r\n                this.inline(token.items[j].tokens);\r\n              }\r\n\r\n              break;\r\n            }\r\n        }\r\n      }\r\n\r\n      return tokens;\r\n    }\r\n    /**\r\n     * Lexing/Compiling\r\n     */\r\n    ;\r\n\r\n    _proto.inlineTokens = function inlineTokens(src, tokens, inLink, inRawBlock) {\r\n      var _this2 = this;\r\n\r\n      if (tokens === void 0) {\r\n        tokens = [];\r\n      }\r\n\r\n      if (inLink === void 0) {\r\n        inLink = false;\r\n      }\r\n\r\n      if (inRawBlock === void 0) {\r\n        inRawBlock = false;\r\n      }\r\n\r\n      var token, lastToken, cutSrc; // String with links masked to avoid interference with em and strong\r\n\r\n      var maskedSrc = src;\r\n      var match;\r\n      var keepPrevChar, prevChar; // Mask out reflinks\r\n\r\n      if (this.tokens.links) {\r\n        var links = Object.keys(this.tokens.links);\r\n\r\n        if (links.length > 0) {\r\n          while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\r\n            if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\r\n              maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\r\n            }\r\n          }\r\n        }\r\n      } // Mask out other blocks\r\n\r\n\r\n      while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\r\n        maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\r\n      } // Mask out escaped em & strong delimiters\r\n\r\n\r\n      while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\r\n        maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\r\n      }\r\n\r\n      while (src) {\r\n        if (!keepPrevChar) {\r\n          prevChar = '';\r\n        }\r\n\r\n        keepPrevChar = false; // extensions\r\n\r\n        if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(function (extTokenizer) {\r\n          if (token = extTokenizer.call(_this2, src, tokens)) {\r\n            src = src.substring(token.raw.length);\r\n            tokens.push(token);\r\n            return true;\r\n          }\r\n\r\n          return false;\r\n        })) {\r\n          continue;\r\n        } // escape\r\n\r\n\r\n        if (token = this.tokenizer.escape(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // tag\r\n\r\n\r\n        if (token = this.tokenizer.tag(src, inLink, inRawBlock)) {\r\n          src = src.substring(token.raw.length);\r\n          inLink = token.inLink;\r\n          inRawBlock = token.inRawBlock;\r\n          lastToken = tokens[tokens.length - 1];\r\n\r\n          if (lastToken && token.type === 'text' && lastToken.type === 'text') {\r\n            lastToken.raw += token.raw;\r\n            lastToken.text += token.text;\r\n          } else {\r\n            tokens.push(token);\r\n          }\r\n\r\n          continue;\r\n        } // link\r\n\r\n\r\n        if (token = this.tokenizer.link(src)) {\r\n          src = src.substring(token.raw.length);\r\n\r\n          if (token.type === 'link') {\r\n            token.tokens = this.inlineTokens(token.text, [], true, inRawBlock);\r\n          }\r\n\r\n          tokens.push(token);\r\n          continue;\r\n        } // reflink, nolink\r\n\r\n\r\n        if (token = this.tokenizer.reflink(src, this.tokens.links)) {\r\n          src = src.substring(token.raw.length);\r\n          lastToken = tokens[tokens.length - 1];\r\n\r\n          if (token.type === 'link') {\r\n            token.tokens = this.inlineTokens(token.text, [], true, inRawBlock);\r\n            tokens.push(token);\r\n          } else if (lastToken && token.type === 'text' && lastToken.type === 'text') {\r\n            lastToken.raw += token.raw;\r\n            lastToken.text += token.text;\r\n          } else {\r\n            tokens.push(token);\r\n          }\r\n\r\n          continue;\r\n        } // em & strong\r\n\r\n\r\n        if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\r\n          src = src.substring(token.raw.length);\r\n          token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);\r\n          tokens.push(token);\r\n          continue;\r\n        } // code\r\n\r\n\r\n        if (token = this.tokenizer.codespan(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // br\r\n\r\n\r\n        if (token = this.tokenizer.br(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // del (gfm)\r\n\r\n\r\n        if (token = this.tokenizer.del(src)) {\r\n          src = src.substring(token.raw.length);\r\n          token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);\r\n          tokens.push(token);\r\n          continue;\r\n        } // autolink\r\n\r\n\r\n        if (token = this.tokenizer.autolink(src, mangle)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // url (gfm)\r\n\r\n\r\n        if (!inLink && (token = this.tokenizer.url(src, mangle))) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // text\r\n        // prevent inlineText consuming extensions by clipping 'src' to extension start\r\n\r\n\r\n        cutSrc = src;\r\n\r\n        if (this.options.extensions && this.options.extensions.startInline) {\r\n          (function () {\r\n            var startIndex = Infinity;\r\n            var tempSrc = src.slice(1);\r\n            var tempStart = void 0;\r\n\r\n            _this2.options.extensions.startInline.forEach(function (getStartIndex) {\r\n              tempStart = getStartIndex.call(this, tempSrc);\r\n\r\n              if (typeof tempStart === 'number' && tempStart >= 0) {\r\n                startIndex = Math.min(startIndex, tempStart);\r\n              }\r\n            });\r\n\r\n            if (startIndex < Infinity && startIndex >= 0) {\r\n              cutSrc = src.substring(0, startIndex + 1);\r\n            }\r\n          })();\r\n        }\r\n\r\n        if (token = this.tokenizer.inlineText(cutSrc, inRawBlock, smartypants)) {\r\n          src = src.substring(token.raw.length);\r\n\r\n          if (token.raw.slice(-1) !== '_') {\r\n            // Track prevChar before string of ____ started\r\n            prevChar = token.raw.slice(-1);\r\n          }\r\n\r\n          keepPrevChar = true;\r\n          lastToken = tokens[tokens.length - 1];\r\n\r\n          if (lastToken && lastToken.type === 'text') {\r\n            lastToken.raw += token.raw;\r\n            lastToken.text += token.text;\r\n          } else {\r\n            tokens.push(token);\r\n          }\r\n\r\n          continue;\r\n        }\r\n\r\n        if (src) {\r\n          var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\r\n\r\n          if (this.options.silent) {\r\n            console.error(errMsg);\r\n            break;\r\n          } else {\r\n            throw new Error(errMsg);\r\n          }\r\n        }\r\n      }\r\n\r\n      return tokens;\r\n    };\r\n\r\n    _createClass(Lexer, null, [{\r\n      key: \"rules\",\r\n      get: function get() {\r\n        return {\r\n          block: block,\r\n          inline: inline\r\n        };\r\n      }\r\n    }]);\r\n\r\n    return Lexer;\r\n  }();\r\n\r\n  var defaults$2 = defaults$5.exports.defaults;\r\n  var cleanUrl = helpers.cleanUrl,\r\n      escape$1 = helpers.escape;\r\n  /**\r\n   * Renderer\r\n   */\r\n\r\n  var Renderer_1 = /*#__PURE__*/function () {\r\n    function Renderer(options) {\r\n      this.options = options || defaults$2;\r\n    }\r\n\r\n    var _proto = Renderer.prototype;\r\n\r\n    _proto.code = function code(_code, infostring, escaped) {\r\n      var lang = (infostring || '').match(/\\S*/)[0];\r\n\r\n      if (this.options.highlight) {\r\n        var out = this.options.highlight(_code, lang);\r\n\r\n        if (out != null && out !== _code) {\r\n          escaped = true;\r\n          _code = out;\r\n        }\r\n      }\r\n\r\n      _code = _code.replace(/\\n$/, '') + '\\n';\r\n\r\n      if (!lang) {\r\n        return '<pre><code>' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\\n';\r\n      }\r\n\r\n      return '<pre><code class=\"' + this.options.langPrefix + escape$1(lang, true) + '\">' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\\n';\r\n    };\r\n\r\n    _proto.blockquote = function blockquote(quote) {\r\n      return '<blockquote>\\n' + quote + '</blockquote>\\n';\r\n    };\r\n\r\n    _proto.html = function html(_html) {\r\n      return _html;\r\n    };\r\n\r\n    _proto.heading = function heading(text, level, raw, slugger) {\r\n      if (this.options.headerIds) {\r\n        return '<h' + level + ' id=\"' + this.options.headerPrefix + slugger.slug(raw) + '\">' + text + '</h' + level + '>\\n';\r\n      } // ignore IDs\r\n\r\n\r\n      return '<h' + level + '>' + text + '</h' + level + '>\\n';\r\n    };\r\n\r\n    _proto.hr = function hr() {\r\n      return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\r\n    };\r\n\r\n    _proto.list = function list(body, ordered, start) {\r\n      var type = ordered ? 'ol' : 'ul',\r\n          startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\r\n      return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\r\n    };\r\n\r\n    _proto.listitem = function listitem(text) {\r\n      return '<li>' + text + '</li>\\n';\r\n    };\r\n\r\n    _proto.checkbox = function checkbox(checked) {\r\n      return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? ' /' : '') + '> ';\r\n    };\r\n\r\n    _proto.paragraph = function paragraph(text) {\r\n      return '<p>' + text + '</p>\\n';\r\n    };\r\n\r\n    _proto.table = function table(header, body) {\r\n      if (body) body = '<tbody>' + body + '</tbody>';\r\n      return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\r\n    };\r\n\r\n    _proto.tablerow = function tablerow(content) {\r\n      return '<tr>\\n' + content + '</tr>\\n';\r\n    };\r\n\r\n    _proto.tablecell = function tablecell(content, flags) {\r\n      var type = flags.header ? 'th' : 'td';\r\n      var tag = flags.align ? '<' + type + ' align=\"' + flags.align + '\">' : '<' + type + '>';\r\n      return tag + content + '</' + type + '>\\n';\r\n    } // span level renderer\r\n    ;\r\n\r\n    _proto.strong = function strong(text) {\r\n      return '<strong>' + text + '</strong>';\r\n    };\r\n\r\n    _proto.em = function em(text) {\r\n      return '<em>' + text + '</em>';\r\n    };\r\n\r\n    _proto.codespan = function codespan(text) {\r\n      return '<code>' + text + '</code>';\r\n    };\r\n\r\n    _proto.br = function br() {\r\n      return this.options.xhtml ? '<br/>' : '<br>';\r\n    };\r\n\r\n    _proto.del = function del(text) {\r\n      return '<del>' + text + '</del>';\r\n    };\r\n\r\n    _proto.link = function link(href, title, text) {\r\n      href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\r\n\r\n      if (href === null) {\r\n        return text;\r\n      }\r\n\r\n      var out = '<a href=\"' + escape$1(href) + '\"';\r\n\r\n      if (title) {\r\n        out += ' title=\"' + title + '\"';\r\n      }\r\n\r\n      out += '>' + text + '</a>';\r\n      return out;\r\n    };\r\n\r\n    _proto.image = function image(href, title, text) {\r\n      href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\r\n\r\n      if (href === null) {\r\n        return text;\r\n      }\r\n\r\n      var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\r\n\r\n      if (title) {\r\n        out += ' title=\"' + title + '\"';\r\n      }\r\n\r\n      out += this.options.xhtml ? '/>' : '>';\r\n      return out;\r\n    };\r\n\r\n    _proto.text = function text(_text) {\r\n      return _text;\r\n    };\r\n\r\n    return Renderer;\r\n  }();\r\n\r\n  /**\r\n   * TextRenderer\r\n   * returns only the textual part of the token\r\n   */\r\n\r\n  var TextRenderer_1 = /*#__PURE__*/function () {\r\n    function TextRenderer() {}\r\n\r\n    var _proto = TextRenderer.prototype;\r\n\r\n    // no need for block level renderers\r\n    _proto.strong = function strong(text) {\r\n      return text;\r\n    };\r\n\r\n    _proto.em = function em(text) {\r\n      return text;\r\n    };\r\n\r\n    _proto.codespan = function codespan(text) {\r\n      return text;\r\n    };\r\n\r\n    _proto.del = function del(text) {\r\n      return text;\r\n    };\r\n\r\n    _proto.html = function html(text) {\r\n      return text;\r\n    };\r\n\r\n    _proto.text = function text(_text) {\r\n      return _text;\r\n    };\r\n\r\n    _proto.link = function link(href, title, text) {\r\n      return '' + text;\r\n    };\r\n\r\n    _proto.image = function image(href, title, text) {\r\n      return '' + text;\r\n    };\r\n\r\n    _proto.br = function br() {\r\n      return '';\r\n    };\r\n\r\n    return TextRenderer;\r\n  }();\r\n\r\n  /**\r\n   * Slugger generates header id\r\n   */\r\n\r\n  var Slugger_1 = /*#__PURE__*/function () {\r\n    function Slugger() {\r\n      this.seen = {};\r\n    }\r\n\r\n    var _proto = Slugger.prototype;\r\n\r\n    _proto.serialize = function serialize(value) {\r\n      return value.toLowerCase().trim() // remove html tags\r\n      .replace(/<[!\\/a-z].*?>/ig, '') // remove unwanted chars\r\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '').replace(/\\s/g, '-');\r\n    }\r\n    /**\r\n     * Finds the next safe (unique) slug to use\r\n     */\r\n    ;\r\n\r\n    _proto.getNextSafeSlug = function getNextSafeSlug(originalSlug, isDryRun) {\r\n      var slug = originalSlug;\r\n      var occurenceAccumulator = 0;\r\n\r\n      if (this.seen.hasOwnProperty(slug)) {\r\n        occurenceAccumulator = this.seen[originalSlug];\r\n\r\n        do {\r\n          occurenceAccumulator++;\r\n          slug = originalSlug + '-' + occurenceAccumulator;\r\n        } while (this.seen.hasOwnProperty(slug));\r\n      }\r\n\r\n      if (!isDryRun) {\r\n        this.seen[originalSlug] = occurenceAccumulator;\r\n        this.seen[slug] = 0;\r\n      }\r\n\r\n      return slug;\r\n    }\r\n    /**\r\n     * Convert string to unique id\r\n     * @param {object} options\r\n     * @param {boolean} options.dryrun Generates the next unique slug without updating the internal accumulator.\r\n     */\r\n    ;\r\n\r\n    _proto.slug = function slug(value, options) {\r\n      if (options === void 0) {\r\n        options = {};\r\n      }\r\n\r\n      var slug = this.serialize(value);\r\n      return this.getNextSafeSlug(slug, options.dryrun);\r\n    };\r\n\r\n    return Slugger;\r\n  }();\r\n\r\n  var Renderer$1 = Renderer_1;\r\n  var TextRenderer$1 = TextRenderer_1;\r\n  var Slugger$1 = Slugger_1;\r\n  var defaults$1 = defaults$5.exports.defaults;\r\n  var unescape = helpers.unescape;\r\n  /**\r\n   * Parsing & Compiling\r\n   */\r\n\r\n  var Parser_1 = /*#__PURE__*/function () {\r\n    function Parser(options) {\r\n      this.options = options || defaults$1;\r\n      this.options.renderer = this.options.renderer || new Renderer$1();\r\n      this.renderer = this.options.renderer;\r\n      this.renderer.options = this.options;\r\n      this.textRenderer = new TextRenderer$1();\r\n      this.slugger = new Slugger$1();\r\n    }\r\n    /**\r\n     * Static Parse Method\r\n     */\r\n\r\n\r\n    Parser.parse = function parse(tokens, options) {\r\n      var parser = new Parser(options);\r\n      return parser.parse(tokens);\r\n    }\r\n    /**\r\n     * Static Parse Inline Method\r\n     */\r\n    ;\r\n\r\n    Parser.parseInline = function parseInline(tokens, options) {\r\n      var parser = new Parser(options);\r\n      return parser.parseInline(tokens);\r\n    }\r\n    /**\r\n     * Parse Loop\r\n     */\r\n    ;\r\n\r\n    var _proto = Parser.prototype;\r\n\r\n    _proto.parse = function parse(tokens, top) {\r\n      if (top === void 0) {\r\n        top = true;\r\n      }\r\n\r\n      var out = '',\r\n          i,\r\n          j,\r\n          k,\r\n          l2,\r\n          l3,\r\n          row,\r\n          cell,\r\n          header,\r\n          body,\r\n          token,\r\n          ordered,\r\n          start,\r\n          loose,\r\n          itemBody,\r\n          item,\r\n          checked,\r\n          task,\r\n          checkbox,\r\n          ret;\r\n      var l = tokens.length;\r\n\r\n      for (i = 0; i < l; i++) {\r\n        token = tokens[i]; // Run any renderer extensions\r\n\r\n        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\r\n          ret = this.options.extensions.renderers[token.type].call(this, token);\r\n\r\n          if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\r\n            out += ret || '';\r\n            continue;\r\n          }\r\n        }\r\n\r\n        switch (token.type) {\r\n          case 'space':\r\n            {\r\n              continue;\r\n            }\r\n\r\n          case 'hr':\r\n            {\r\n              out += this.renderer.hr();\r\n              continue;\r\n            }\r\n\r\n          case 'heading':\r\n            {\r\n              out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);\r\n              continue;\r\n            }\r\n\r\n          case 'code':\r\n            {\r\n              out += this.renderer.code(token.text, token.lang, token.escaped);\r\n              continue;\r\n            }\r\n\r\n          case 'table':\r\n            {\r\n              header = ''; // header\r\n\r\n              cell = '';\r\n              l2 = token.header.length;\r\n\r\n              for (j = 0; j < l2; j++) {\r\n                cell += this.renderer.tablecell(this.parseInline(token.tokens.header[j]), {\r\n                  header: true,\r\n                  align: token.align[j]\r\n                });\r\n              }\r\n\r\n              header += this.renderer.tablerow(cell);\r\n              body = '';\r\n              l2 = token.cells.length;\r\n\r\n              for (j = 0; j < l2; j++) {\r\n                row = token.tokens.cells[j];\r\n                cell = '';\r\n                l3 = row.length;\r\n\r\n                for (k = 0; k < l3; k++) {\r\n                  cell += this.renderer.tablecell(this.parseInline(row[k]), {\r\n                    header: false,\r\n                    align: token.align[k]\r\n                  });\r\n                }\r\n\r\n                body += this.renderer.tablerow(cell);\r\n              }\r\n\r\n              out += this.renderer.table(header, body);\r\n              continue;\r\n            }\r\n\r\n          case 'blockquote':\r\n            {\r\n              body = this.parse(token.tokens);\r\n              out += this.renderer.blockquote(body);\r\n              continue;\r\n            }\r\n\r\n          case 'list':\r\n            {\r\n              ordered = token.ordered;\r\n              start = token.start;\r\n              loose = token.loose;\r\n              l2 = token.items.length;\r\n              body = '';\r\n\r\n              for (j = 0; j < l2; j++) {\r\n                item = token.items[j];\r\n                checked = item.checked;\r\n                task = item.task;\r\n                itemBody = '';\r\n\r\n                if (item.task) {\r\n                  checkbox = this.renderer.checkbox(checked);\r\n\r\n                  if (loose) {\r\n                    if (item.tokens.length > 0 && item.tokens[0].type === 'text') {\r\n                      item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\r\n\r\n                      if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\r\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\r\n                      }\r\n                    } else {\r\n                      item.tokens.unshift({\r\n                        type: 'text',\r\n                        text: checkbox\r\n                      });\r\n                    }\r\n                  } else {\r\n                    itemBody += checkbox;\r\n                  }\r\n                }\r\n\r\n                itemBody += this.parse(item.tokens, loose);\r\n                body += this.renderer.listitem(itemBody, task, checked);\r\n              }\r\n\r\n              out += this.renderer.list(body, ordered, start);\r\n              continue;\r\n            }\r\n\r\n          case 'html':\r\n            {\r\n              // TODO parse inline content if parameter markdown=1\r\n              out += this.renderer.html(token.text);\r\n              continue;\r\n            }\r\n\r\n          case 'paragraph':\r\n            {\r\n              out += this.renderer.paragraph(this.parseInline(token.tokens));\r\n              continue;\r\n            }\r\n\r\n          case 'text':\r\n            {\r\n              body = token.tokens ? this.parseInline(token.tokens) : token.text;\r\n\r\n              while (i + 1 < l && tokens[i + 1].type === 'text') {\r\n                token = tokens[++i];\r\n                body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\r\n              }\r\n\r\n              out += top ? this.renderer.paragraph(body) : body;\r\n              continue;\r\n            }\r\n\r\n          default:\r\n            {\r\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\r\n\r\n              if (this.options.silent) {\r\n                console.error(errMsg);\r\n                return;\r\n              } else {\r\n                throw new Error(errMsg);\r\n              }\r\n            }\r\n        }\r\n      }\r\n\r\n      return out;\r\n    }\r\n    /**\r\n     * Parse Inline Tokens\r\n     */\r\n    ;\r\n\r\n    _proto.parseInline = function parseInline(tokens, renderer) {\r\n      renderer = renderer || this.renderer;\r\n      var out = '',\r\n          i,\r\n          token,\r\n          ret;\r\n      var l = tokens.length;\r\n\r\n      for (i = 0; i < l; i++) {\r\n        token = tokens[i]; // Run any renderer extensions\r\n\r\n        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\r\n          ret = this.options.extensions.renderers[token.type].call(this, token);\r\n\r\n          if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\r\n            out += ret || '';\r\n            continue;\r\n          }\r\n        }\r\n\r\n        switch (token.type) {\r\n          case 'escape':\r\n            {\r\n              out += renderer.text(token.text);\r\n              break;\r\n            }\r\n\r\n          case 'html':\r\n            {\r\n              out += renderer.html(token.text);\r\n              break;\r\n            }\r\n\r\n          case 'link':\r\n            {\r\n              out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\r\n              break;\r\n            }\r\n\r\n          case 'image':\r\n            {\r\n              out += renderer.image(token.href, token.title, token.text);\r\n              break;\r\n            }\r\n\r\n          case 'strong':\r\n            {\r\n              out += renderer.strong(this.parseInline(token.tokens, renderer));\r\n              break;\r\n            }\r\n\r\n          case 'em':\r\n            {\r\n              out += renderer.em(this.parseInline(token.tokens, renderer));\r\n              break;\r\n            }\r\n\r\n          case 'codespan':\r\n            {\r\n              out += renderer.codespan(token.text);\r\n              break;\r\n            }\r\n\r\n          case 'br':\r\n            {\r\n              out += renderer.br();\r\n              break;\r\n            }\r\n\r\n          case 'del':\r\n            {\r\n              out += renderer.del(this.parseInline(token.tokens, renderer));\r\n              break;\r\n            }\r\n\r\n          case 'text':\r\n            {\r\n              out += renderer.text(token.text);\r\n              break;\r\n            }\r\n\r\n          default:\r\n            {\r\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\r\n\r\n              if (this.options.silent) {\r\n                console.error(errMsg);\r\n                return;\r\n              } else {\r\n                throw new Error(errMsg);\r\n              }\r\n            }\r\n        }\r\n      }\r\n\r\n      return out;\r\n    };\r\n\r\n    return Parser;\r\n  }();\r\n\r\n  var Lexer = Lexer_1;\r\n  var Parser = Parser_1;\r\n  var Tokenizer = Tokenizer_1;\r\n  var Renderer = Renderer_1;\r\n  var TextRenderer = TextRenderer_1;\r\n  var Slugger = Slugger_1;\r\n  var merge = helpers.merge,\r\n      checkSanitizeDeprecation = helpers.checkSanitizeDeprecation,\r\n      escape = helpers.escape;\r\n  var getDefaults = defaults$5.exports.getDefaults,\r\n      changeDefaults = defaults$5.exports.changeDefaults,\r\n      defaults = defaults$5.exports.defaults;\r\n  /**\r\n   * Marked\r\n   */\r\n\r\n  function marked(src, opt, callback) {\r\n    // throw error in case of non string input\r\n    if (typeof src === 'undefined' || src === null) {\r\n      throw new Error('marked(): input parameter is undefined or null');\r\n    }\r\n\r\n    if (typeof src !== 'string') {\r\n      throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\r\n    }\r\n\r\n    if (typeof opt === 'function') {\r\n      callback = opt;\r\n      opt = null;\r\n    }\r\n\r\n    opt = merge({}, marked.defaults, opt || {});\r\n    checkSanitizeDeprecation(opt);\r\n\r\n    if (callback) {\r\n      var highlight = opt.highlight;\r\n      var tokens;\r\n\r\n      try {\r\n        tokens = Lexer.lex(src, opt);\r\n      } catch (e) {\r\n        return callback(e);\r\n      }\r\n\r\n      var done = function done(err) {\r\n        var out;\r\n\r\n        if (!err) {\r\n          try {\r\n            if (opt.walkTokens) {\r\n              marked.walkTokens(tokens, opt.walkTokens);\r\n            }\r\n\r\n            out = Parser.parse(tokens, opt);\r\n          } catch (e) {\r\n            err = e;\r\n          }\r\n        }\r\n\r\n        opt.highlight = highlight;\r\n        return err ? callback(err) : callback(null, out);\r\n      };\r\n\r\n      if (!highlight || highlight.length < 3) {\r\n        return done();\r\n      }\r\n\r\n      delete opt.highlight;\r\n      if (!tokens.length) return done();\r\n      var pending = 0;\r\n      marked.walkTokens(tokens, function (token) {\r\n        if (token.type === 'code') {\r\n          pending++;\r\n          setTimeout(function () {\r\n            highlight(token.text, token.lang, function (err, code) {\r\n              if (err) {\r\n                return done(err);\r\n              }\r\n\r\n              if (code != null && code !== token.text) {\r\n                token.text = code;\r\n                token.escaped = true;\r\n              }\r\n\r\n              pending--;\r\n\r\n              if (pending === 0) {\r\n                done();\r\n              }\r\n            });\r\n          }, 0);\r\n        }\r\n      });\r\n\r\n      if (pending === 0) {\r\n        done();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    try {\r\n      var _tokens = Lexer.lex(src, opt);\r\n\r\n      if (opt.walkTokens) {\r\n        marked.walkTokens(_tokens, opt.walkTokens);\r\n      }\r\n\r\n      return Parser.parse(_tokens, opt);\r\n    } catch (e) {\r\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\r\n\r\n      if (opt.silent) {\r\n        return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\r\n      }\r\n\r\n      throw e;\r\n    }\r\n  }\r\n  /**\r\n   * Options\r\n   */\r\n\r\n\r\n  marked.options = marked.setOptions = function (opt) {\r\n    merge(marked.defaults, opt);\r\n    changeDefaults(marked.defaults);\r\n    return marked;\r\n  };\r\n\r\n  marked.getDefaults = getDefaults;\r\n  marked.defaults = defaults;\r\n  /**\r\n   * Use Extension\r\n   */\r\n\r\n  marked.use = function () {\r\n    var _this = this;\r\n\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n\r\n    var opts = merge.apply(void 0, [{}].concat(args));\r\n    var extensions = marked.defaults.extensions || {\r\n      renderers: {},\r\n      childTokens: {}\r\n    };\r\n    var hasExtensions;\r\n    args.forEach(function (pack) {\r\n      // ==-- Parse \"addon\" extensions --== //\r\n      if (pack.extensions) {\r\n        hasExtensions = true;\r\n        pack.extensions.forEach(function (ext) {\r\n          if (!ext.name) {\r\n            throw new Error('extension name required');\r\n          }\r\n\r\n          if (ext.renderer) {\r\n            // Renderer extensions\r\n            var prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;\r\n\r\n            if (prevRenderer) {\r\n              // Replace extension with func to run new extension but fall back if false\r\n              extensions.renderers[ext.name] = function () {\r\n                for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n                  args[_key2] = arguments[_key2];\r\n                }\r\n\r\n                var ret = ext.renderer.apply(this, args);\r\n\r\n                if (ret === false) {\r\n                  ret = prevRenderer.apply(this, args);\r\n                }\r\n\r\n                return ret;\r\n              };\r\n            } else {\r\n              extensions.renderers[ext.name] = ext.renderer;\r\n            }\r\n          }\r\n\r\n          if (ext.tokenizer) {\r\n            // Tokenizer Extensions\r\n            if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {\r\n              throw new Error(\"extension level must be 'block' or 'inline'\");\r\n            }\r\n\r\n            if (extensions[ext.level]) {\r\n              extensions[ext.level].unshift(ext.tokenizer);\r\n            } else {\r\n              extensions[ext.level] = [ext.tokenizer];\r\n            }\r\n\r\n            if (ext.start) {\r\n              // Function to check for start of token\r\n              if (ext.level === 'block') {\r\n                if (extensions.startBlock) {\r\n                  extensions.startBlock.push(ext.start);\r\n                } else {\r\n                  extensions.startBlock = [ext.start];\r\n                }\r\n              } else if (ext.level === 'inline') {\r\n                if (extensions.startInline) {\r\n                  extensions.startInline.push(ext.start);\r\n                } else {\r\n                  extensions.startInline = [ext.start];\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          if (ext.childTokens) {\r\n            // Child tokens to be visited by walkTokens\r\n            extensions.childTokens[ext.name] = ext.childTokens;\r\n          }\r\n        });\r\n      } // ==-- Parse \"overwrite\" extensions --== //\r\n\r\n\r\n      if (pack.renderer) {\r\n        (function () {\r\n          var renderer = marked.defaults.renderer || new Renderer();\r\n\r\n          var _loop = function _loop(prop) {\r\n            var prevRenderer = renderer[prop]; // Replace renderer with func to run extension, but fall back if false\r\n\r\n            renderer[prop] = function () {\r\n              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\r\n                args[_key3] = arguments[_key3];\r\n              }\r\n\r\n              var ret = pack.renderer[prop].apply(renderer, args);\r\n\r\n              if (ret === false) {\r\n                ret = prevRenderer.apply(renderer, args);\r\n              }\r\n\r\n              return ret;\r\n            };\r\n          };\r\n\r\n          for (var prop in pack.renderer) {\r\n            _loop(prop);\r\n          }\r\n\r\n          opts.renderer = renderer;\r\n        })();\r\n      }\r\n\r\n      if (pack.tokenizer) {\r\n        (function () {\r\n          var tokenizer = marked.defaults.tokenizer || new Tokenizer();\r\n\r\n          var _loop2 = function _loop2(prop) {\r\n            var prevTokenizer = tokenizer[prop]; // Replace tokenizer with func to run extension, but fall back if false\r\n\r\n            tokenizer[prop] = function () {\r\n              for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\r\n                args[_key4] = arguments[_key4];\r\n              }\r\n\r\n              var ret = pack.tokenizer[prop].apply(tokenizer, args);\r\n\r\n              if (ret === false) {\r\n                ret = prevTokenizer.apply(tokenizer, args);\r\n              }\r\n\r\n              return ret;\r\n            };\r\n          };\r\n\r\n          for (var prop in pack.tokenizer) {\r\n            _loop2(prop);\r\n          }\r\n\r\n          opts.tokenizer = tokenizer;\r\n        })();\r\n      } // ==-- Parse WalkTokens extensions --== //\r\n\r\n\r\n      if (pack.walkTokens) {\r\n        var walkTokens = marked.defaults.walkTokens;\r\n\r\n        opts.walkTokens = function (token) {\r\n          pack.walkTokens.call(_this, token);\r\n\r\n          if (walkTokens) {\r\n            walkTokens(token);\r\n          }\r\n        };\r\n      }\r\n\r\n      if (hasExtensions) {\r\n        opts.extensions = extensions;\r\n      }\r\n\r\n      marked.setOptions(opts);\r\n    });\r\n  };\r\n  /**\r\n   * Run callback for every token\r\n   */\r\n\r\n\r\n  marked.walkTokens = function (tokens, callback) {\r\n    var _loop3 = function _loop3() {\r\n      var token = _step.value;\r\n      callback(token);\r\n\r\n      switch (token.type) {\r\n        case 'table':\r\n          {\r\n            for (var _iterator2 = _createForOfIteratorHelperLoose(token.tokens.header), _step2; !(_step2 = _iterator2()).done;) {\r\n              var cell = _step2.value;\r\n              marked.walkTokens(cell, callback);\r\n            }\r\n\r\n            for (var _iterator3 = _createForOfIteratorHelperLoose(token.tokens.cells), _step3; !(_step3 = _iterator3()).done;) {\r\n              var row = _step3.value;\r\n\r\n              for (var _iterator4 = _createForOfIteratorHelperLoose(row), _step4; !(_step4 = _iterator4()).done;) {\r\n                var _cell = _step4.value;\r\n                marked.walkTokens(_cell, callback);\r\n              }\r\n            }\r\n\r\n            break;\r\n          }\r\n\r\n        case 'list':\r\n          {\r\n            marked.walkTokens(token.items, callback);\r\n            break;\r\n          }\r\n\r\n        default:\r\n          {\r\n            if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {\r\n              // Walk any extensions\r\n              marked.defaults.extensions.childTokens[token.type].forEach(function (childTokens) {\r\n                marked.walkTokens(token[childTokens], callback);\r\n              });\r\n            } else if (token.tokens) {\r\n              marked.walkTokens(token.tokens, callback);\r\n            }\r\n          }\r\n      }\r\n    };\r\n\r\n    for (var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done;) {\r\n      _loop3();\r\n    }\r\n  };\r\n  /**\r\n   * Parse Inline\r\n   */\r\n\r\n\r\n  marked.parseInline = function (src, opt) {\r\n    // throw error in case of non string input\r\n    if (typeof src === 'undefined' || src === null) {\r\n      throw new Error('marked.parseInline(): input parameter is undefined or null');\r\n    }\r\n\r\n    if (typeof src !== 'string') {\r\n      throw new Error('marked.parseInline(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\r\n    }\r\n\r\n    opt = merge({}, marked.defaults, opt || {});\r\n    checkSanitizeDeprecation(opt);\r\n\r\n    try {\r\n      var tokens = Lexer.lexInline(src, opt);\r\n\r\n      if (opt.walkTokens) {\r\n        marked.walkTokens(tokens, opt.walkTokens);\r\n      }\r\n\r\n      return Parser.parseInline(tokens, opt);\r\n    } catch (e) {\r\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\r\n\r\n      if (opt.silent) {\r\n        return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\r\n      }\r\n\r\n      throw e;\r\n    }\r\n  };\r\n  /**\r\n   * Expose\r\n   */\r\n\r\n\r\n  marked.Parser = Parser;\r\n  marked.parser = Parser.parse;\r\n  marked.Renderer = Renderer;\r\n  marked.TextRenderer = TextRenderer;\r\n  marked.Lexer = Lexer;\r\n  marked.lexer = Lexer.lex;\r\n  marked.Tokenizer = Tokenizer;\r\n  marked.Slugger = Slugger;\r\n  marked.parse = marked;\r\n  var marked_1 = marked;\r\n\r\n  return marked_1;\r\n\r\n})));\r\n\n\n//# sourceURL=webpack://laze-compiler-web/./node_modules/marked/lib/marked.js?");

/***/ }),

/***/ "./client/client/js/docs.ts":
/*!**********************************!*\
  !*** ./client/client/js/docs.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nvar marked_1 = __importDefault(__webpack_require__(/*! marked */ \"./node_modules/marked/lib/marked.js\"));\r\nvar highlight_1 = __importDefault(__webpack_require__(/*! ./highlight/highlight */ \"./client/client/js/highlight/highlight.ts\"));\r\n// 要素\r\nvar doc = document.getElementById('document-content');\r\nvar main = document.querySelector('.main-content');\r\n// ミラーリング\r\ndocument.querySelector('#index-list .index-list').innerHTML = document.querySelector('.sidebar .index-list').innerHTML;\r\ndocument.querySelector('.responsive-header .version-select').innerHTML = document.querySelector('.versions .version-select').innerHTML;\r\n// version-select 同期\r\ndocument.querySelectorAll('.version-select .input-field select').forEach(function (selectElement) {\r\n    selectElement.addEventListener('change', function (event) {\r\n        document.querySelectorAll('.version-select .input-field select').forEach(function (element) {\r\n            var _a;\r\n            // @ts-ignore\r\n            element.value = (_a = event.target) === null || _a === void 0 ? void 0 : _a.value;\r\n        });\r\n        document.querySelectorAll('.version-select .input-field input').forEach(function (element) {\r\n            var _a, _b;\r\n            // @ts-ignore\r\n            element.value = (_a = event.target) === null || _a === void 0 ? void 0 : _a.querySelector(\"option[value=\" + ((_b = event.target) === null || _b === void 0 ? void 0 : _b.value) + \"]\").innerHTML;\r\n        });\r\n    });\r\n});\r\n// Materialize Init\r\nvar instances = {\r\n    collapsible: M.Collapsible.init(document.querySelectorAll('.collapsible'), {\r\n        onOpenStart: function (el) {\r\n            var icon = el.querySelector('.collapsible-header > .material-icons');\r\n            // icon!.innerHTML = 'keyboard_arrow_down';\r\n            icon === null || icon === void 0 ? void 0 : icon.classList.add('open');\r\n        },\r\n        onCloseStart: function (el) {\r\n            var icon = el.querySelector('.collapsible-header > .material-icons');\r\n            icon === null || icon === void 0 ? void 0 : icon.classList.remove('open');\r\n        },\r\n        accordion: false,\r\n        inDuration: 200,\r\n        outDuration: 200,\r\n    }),\r\n    formSelect: M.FormSelect.init(document.querySelectorAll('select')),\r\n    sidenav: M.Sidenav.init(document.querySelectorAll('.sidenav')),\r\n    featureDiscovery: M.TapTarget.init(document.querySelectorAll('.tap-target')),\r\n};\r\n// Markedのパーサー\r\nvar getLineNumber = function (code) {\r\n    var html = '';\r\n    for (var i = 0; i < code.split('\\n').length; i++) {\r\n        html += \"<div>\" + (i + 1) + \"</div>\";\r\n    }\r\n    return html;\r\n};\r\n{\r\n    var renderer = new marked_1.default.Renderer();\r\n    renderer.code = function (code, language) { return \"<pre><div class=\\\"line-number\\\">\" + getLineNumber(code) + \"</div><code class=\\\"codeblock-laze\\\">\" + highlight_1.default(code) + \"</code></pre>\"; };\r\n    renderer.link = function (href, text, string) { return \"<a href=\\\"\" + href + \"\\\" class=\\\"mdlink\\\">\" + string + \"</a>\"; };\r\n    renderer.heading = function (text, level) {\r\n        var div = document.createElement('div');\r\n        div.innerHTML = text;\r\n        var innerText = text;\r\n        for (var element = div; (element = element.querySelector('*'));) {\r\n            innerText = element.innerHTML;\r\n        }\r\n        return \"<h\" + level + \" id=\\\"\" + innerText + \"\\\">\" + text + (level >= 1 && level <= 2\r\n            ? '<a class=\"link-copy tooltipped\" data-position=\"bottom\" data-tooltip=\"' + 'ここへのリンクをコピー' + '\" data-href=\"' + currentHref + '#' + text + '\"><i class=\"material-icons\">link</i></a>'\r\n            : '') + \"</h\" + level + \">\";\r\n    };\r\n    renderer.codespan = function (code) { return \"<code class=\\\"inline-code\\\">\" + code + \"</code>\"; };\r\n    renderer.table = function (header, body) { return \"<div class=\\\"table-wrapper\\\"><table><thead>\" + header + \"</thead><tbody>\" + body + \"</tbody></table></div>\"; };\r\n    // Markedに設定\r\n    marked_1.default.setOptions({\r\n        renderer: renderer,\r\n    });\r\n}\r\nfunction setMarkdownLink() {\r\n    document.querySelectorAll('a.mdlink').forEach(function (link) {\r\n        if (link.host === location.host) {\r\n            if (link.hash)\r\n                link.addEventListener('click', smoothScroll);\r\n            link.onclick = function () {\r\n                if (link.hash) {\r\n                    link.addEventListener('click', smoothScroll);\r\n                    return true;\r\n                }\r\n                else {\r\n                    var baseHref = link.pathname;\r\n                    requestMarkdown(baseHref);\r\n                    // @ts-ignore\r\n                    document.querySelector('div.sidenav-overlay').click();\r\n                    return false;\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            link.setAttribute('target', '_blank');\r\n            link.setAttribute('rel', 'noopener noreferrer');\r\n        }\r\n    });\r\n}\r\nvar errorMessage = \"\\n<div class=\\\"error-message\\\">\\n\\t<h1><i class=\\\"material-icons\\\">error_outline</i>\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F</h1>\\n\\t<p>\\u518D\\u8AAD\\u307F\\u8FBC\\u307F\\u3057\\u3066\\u307F\\u3066\\u304F\\u3060\\u3055\\u3044</p>\\n</div>\\n\";\r\nvar loadingMessage = \"\\n<div class=\\\"progress-wrapper\\\">\\n\\t<div class=\\\"progress\\\">\\n\\t\\t<div class=\\\"indeterminate\\\"></div>\\n\\t</div>\\n</div>\\n\";\r\nfunction getVersion() {\r\n    var _a;\r\n    // @ts-ignore\r\n    return (_a = document.querySelector('.version-select .input-field select')) === null || _a === void 0 ? void 0 : _a.value;\r\n}\r\n// Markdownをサーバーからリクエスト\r\nvar currentHref = '';\r\nfunction requestMarkdown(href, hash, pop) {\r\n    if (pop === void 0) { pop = false; }\r\n    doc.innerHTML = loadingMessage;\r\n    document.querySelector('.document-outline > .content').innerHTML = '';\r\n    // @ts-ignore\r\n    fetch(\"/docs/\" + getVersion() + href)\r\n        .then(function (res) { return (res.status == 200 ? res.text() : null); })\r\n        .then(function (res) {\r\n        currentHref = href;\r\n        if (res) {\r\n            parseMarkdown(res);\r\n            if (hash) {\r\n                var target = document.getElementById(decodeURI(hash));\r\n                if (target) {\r\n                    main.scrollTop = target.getBoundingClientRect().y;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            doc.innerHTML = errorMessage;\r\n            setMarkdownLink();\r\n        }\r\n        // query変更\r\n        if (!pop) {\r\n            var newurl = location.origin + window.location.pathname + (\"?version=\" + getVersion() + \"&href=\" + currentHref);\r\n            history.pushState({ path: newurl }, '', newurl);\r\n        }\r\n        // active変更\r\n        document.querySelectorAll('.actived').forEach(function (actived) { return actived.classList.remove('actived'); });\r\n        document.querySelectorAll(\"a[href=\\\"\" + href + \"\\\"]\").forEach(function (actived) {\r\n            var _a;\r\n            actived.classList.add('actived');\r\n            if (actived.classList.contains('collection-item')) {\r\n                for (var element = actived; (element = element.parentElement);) {\r\n                    (_a = element.querySelector(':scope > .collapsible-header')) === null || _a === void 0 ? void 0 : _a.classList.add('actived');\r\n                }\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction loadDocumentation(location, pop) {\r\n    if (location === void 0) { location = window.location; }\r\n    if (pop === void 0) { pop = false; }\r\n    if (location.search) {\r\n        var queries = location.search.substr(1).split('&');\r\n        var version = queries.filter(function (query) { return query.startsWith('version='); });\r\n        if (version.length > 0) {\r\n            var ver_1 = version[0].replace('version=', '');\r\n            document.querySelectorAll('.version-select .input-field select').forEach(function (element) {\r\n                // @ts-ignore\r\n                element.value = ver_1;\r\n            });\r\n            document.querySelectorAll('.version-select .input-field input').forEach(function (element) {\r\n                // @ts-ignore\r\n                element.value = document.querySelector(\".version-select .input-field select option[value=\" + ver_1 + \"]\").innerHTML;\r\n            });\r\n        }\r\n        var href = queries.filter(function (query) { return query.startsWith('href='); });\r\n        if (href.length > 0) {\r\n            requestMarkdown(href[0].replace('href=', ''), location.hash ? location.hash.substr(1) : '', pop);\r\n        }\r\n        else {\r\n            requestMarkdown('/first', undefined, pop);\r\n        }\r\n    }\r\n    else {\r\n        requestMarkdown('/first', undefined, pop);\r\n    }\r\n}\r\nloadDocumentation();\r\n// Markdownをパース\r\nfunction parseMarkdown(content) {\r\n    function headline(markdown) {\r\n        var lines = markdown.split('\\n');\r\n        var headline = [];\r\n        var inCode = false;\r\n        for (var it in lines) {\r\n            if (lines[it].match(/^\\`\\`\\`.?/))\r\n                inCode = !inCode;\r\n            if (lines[it].startsWith('## ') && !inCode)\r\n                headline.push(lines[it].replace(/^#+/, '').trim());\r\n        }\r\n        return headline;\r\n    }\r\n    // 見出し一覧を表示\r\n    document.querySelector('.document-outline > .content').innerHTML = headline(content)\r\n        .map(function (head) { return \"<a href=\\\"#\" + head + \"\\\">\" + head + \"</a>\"; })\r\n        .join('');\r\n    // 見出し一覧をスムーススクロールに\r\n    document.querySelectorAll('.document-outline > .content > a').forEach(function (link) {\r\n        link.addEventListener('click', smoothScroll);\r\n    });\r\n    // 本体をパース\r\n    doc.innerHTML = marked_1.default(content);\r\n    // リンクを設定\r\n    setMarkdownLink();\r\n    // アンカーリンクの設定\r\n    document.querySelectorAll('.link-copy').forEach(function (element) {\r\n        var link = element;\r\n        element.addEventListener('click', function (e) {\r\n            // コピー\r\n            var dummyElement = document.createElement('textarea');\r\n            document.getElementById('document-content').appendChild(dummyElement);\r\n            // @ts-ignore\r\n            dummyElement.innerText = \"\" + location.origin + location.pathname + \"?version=\" + getVersion() + \"&href=\" + element.dataset.href;\r\n            dummyElement.select();\r\n            document.execCommand('copy');\r\n            dummyElement.remove();\r\n            // tooltip変更\r\n            var initialTooltip;\r\n            if (!link.dataset.copied) {\r\n                initialTooltip = link.dataset.tooltip;\r\n                link.dataset.tooltip = 'リンクをコピーしました';\r\n                link.dataset.copied = 'true';\r\n                var instance_1 = M.Tooltip.getInstance(link);\r\n                // @ts-ignore\r\n                instance_1.tooltipEl.classList.add('copied');\r\n                instance_1.options.html = \"\" + link.dataset.tooltip;\r\n                // @ts-ignore\r\n                instance_1._updateTooltipContent();\r\n                link.addEventListener('mouseleave', mouseleave);\r\n            }\r\n            function mouseleave(e) {\r\n                var instance = M.Tooltip.getInstance(link);\r\n                link.dataset.tooltip = initialTooltip;\r\n                link.dataset.copied = '';\r\n                setTimeout(function () {\r\n                    // @ts-ignore\r\n                    instance.tooltipEl.classList.remove('copied');\r\n                }, instance.options.exitDelay + instance.options.outDuration);\r\n                link.removeEventListener('mouseleave', mouseleave);\r\n            }\r\n            return false;\r\n        });\r\n    });\r\n    var instance = M.Tooltip.init(document.querySelectorAll('.tooltipped'));\r\n}\r\n// 進む・戻る時に更新\r\nwindow.onpopstate = function (e) {\r\n    // @ts-ignore\r\n    loadDocumentation(e.currentTarget.location, true);\r\n};\r\n// lg未満ならdiscoveryを表示\r\nif (!localStorage.getItem('disableMenuDiscovery')) {\r\n    setTimeout(function () {\r\n        if (innerWidth < 993)\r\n            M.TapTarget.getInstance(document.querySelector('.tap-target[data-target=\"index-list-trigger\"]')).open();\r\n    }, 1000);\r\n}\r\nvar closeDiscovery = function () {\r\n    return setTimeout(function () {\r\n        M.TapTarget.getInstance(document.querySelector('.tap-target[data-target=\"index-list-trigger\"]')).close();\r\n    }, 1);\r\n};\r\ndocument.getElementById('close-discovery').addEventListener('click', closeDiscovery);\r\ndocument.getElementById('disable-discovery').addEventListener('click', function () {\r\n    closeDiscovery();\r\n    localStorage.setItem('disableMenuDiscovery', '1');\r\n});\r\n// content-spy\r\nmain.addEventListener('scroll', function () {\r\n    var _a;\r\n    var contents = document.querySelectorAll('#document-content h2');\r\n    var active = null;\r\n    contents.forEach(function (content) {\r\n        if (content.getBoundingClientRect().y < 100) {\r\n            active = content.id;\r\n        }\r\n    });\r\n    document.querySelectorAll('.document-outline > .content > a').forEach(function (content) { return content.classList.remove('active'); });\r\n    if (active)\r\n        (_a = document.querySelector(\".document-outline > .content > a[href=\\\"#\" + active + \"\\\"]\")) === null || _a === void 0 ? void 0 : _a.classList.add('active');\r\n});\r\n// スムーススクロール用関数\r\nfunction smoothScroll(e) {\r\n    e.preventDefault();\r\n    document.querySelector(this.getAttribute('href')).scrollIntoView({\r\n        behavior: 'smooth',\r\n    });\r\n}\r\n\n\n//# sourceURL=webpack://laze-compiler-web/./client/client/js/docs.ts?");

/***/ }),

/***/ "./client/client/js/highlight/highlight.ts":
/*!*************************************************!*\
  !*** ./client/client/js/highlight/highlight.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nvar jaKeywordList = {\r\n    keywords: {\r\n        true: '真',\r\n        false: '偽',\r\n        function: '関数',\r\n        class: 'クラス',\r\n    },\r\n    functions: {\r\n        loadJS: 'js読み込み',\r\n        sizeof: 'バイト数',\r\n    },\r\n    control: {\r\n        end: '終了',\r\n        if: 'もし',\r\n        then: 'ならば',\r\n        else: 'でなければ',\r\n        from: 'から',\r\n        until: 'まで',\r\n        break: '抜ける',\r\n        continue: '次へ',\r\n        loop: '無限ループ',\r\n        include: '#include',\r\n        private: '非公開',\r\n        public: '公開',\r\n    },\r\n    typeKeywords: {\r\n        void: '無',\r\n        boolean: '真偽',\r\n        int32: '整数32',\r\n        int64: '整数',\r\n        double: '実数',\r\n        char: '文字',\r\n        string: '文字列',\r\n    },\r\n};\r\nvar tokens = (function () {\r\n    var result = {\r\n        colon: '[:：]',\r\n        number: '[0-9]',\r\n        char: '㐀-龯ぁ-んァ-ヶa-zA-Zー#＃_＿',\r\n        charnum: '㐀-龯ぁ-んァ-ヶa-zA-Z0-9ー#＃_＿',\r\n        separators: '~!@\\\\$%\\\\^&\\\\*\\\\(\\\\)\\\\-\\\\=\\\\+\\\\[\\\\{\\\\]\\\\}\\\\|;\\\\:\\'\\\\\",\\\\.\\\\<\\\\>/\\\\?＆＊（）＝＋［｛］｝：’”、。＞\\\\s\\\\t',\r\n        operator: '＝|=|＋＝|＋=|\\\\+＝|\\\\+=|-＝|-=|＊＝|＊=|\\\\*＝|\\\\*=|/＝|/=|＞\\\\＞|\\\\>|＞＝|＞=|\\\\<＝|\\\\<=|＞＝|＞=|>＝|>=|＝＝|＝=|=＝|==|＆＆|＆&|&＆|&&|\\\\|\\\\||＋＋|＋\\\\+|\\\\+＋|\\\\+\\\\+|--',\r\n    };\r\n    Object.keys(jaKeywordList).forEach(function (key) {\r\n        // @ts-ignore\r\n        result[key] = Object.values(jaKeywordList[key]);\r\n    });\r\n    return result;\r\n})();\r\nvar tokenPatternDefine = {\r\n    types: \"((?:\" + tokens.typeKeywords.join('|') + \")\\\\s*\" + tokens.colon + \"\\\\s*)\",\r\n    name: \"[\" + tokens.char + \"][\" + tokens.charnum + \"]*\",\r\n    separator: \"(?:[\" + tokens.separators + \"]|^)\",\r\n};\r\nvar tokenPatterns = {\r\n    function: new RegExp(tokenPatternDefine.types + \"?(\" + jaKeywordList.keywords.function + tokens.colon + \")?(\" + tokenPatternDefine.name + \")(?=\\\\s*[\\\\(\\uFF08])\", 'g'),\r\n    class: new RegExp(\"\" + jaKeywordList.keywords.class + tokens.colon + \"(\" + tokenPatternDefine.name + \")\", 'g'),\r\n    keyword: new RegExp(\"[\" + tokens.char + \"][\" + tokens.charnum + \"]*\", 'g'),\r\n    types: new RegExp(\"(\" + tokens.typeKeywords.join('|') + \")\\\\s*(?=\" + tokens.colon + \")\", 'g'),\r\n    variable: new RegExp(\"(\" + tokenPatternDefine.separator + tokenPatternDefine.types + \"(\" + tokenPatternDefine.name + \")|(?:[\" + tokens.separators.replace('\\\\:', '') + \"]|^)(\" + tokenPatternDefine.name + \")(?=\\\\s+[^\\\\(\\\\{\\uFF08\\uFF5B\\\\s\\\\:]|[^\" + tokens.char + \"\\\\(\\\\{\\uFF08\\uFF5B\\\\s\\\\:]|\\\\s*$))\", 'g'),\r\n    number: new RegExp(tokenPatternDefine.separator + \"((0b|0x)?\" + tokens.number + \"(?:\" + tokens.number + \"|\\\\.)*)\", 'g'),\r\n    operator: new RegExp(\"(\" + tokens.operator + \")\", 'g'),\r\n    scope: new RegExp('[\\\\{\\\\}｛｝]', 'g'),\r\n    bracketsAll: new RegExp('[\\\\{\\\\}｛｝\\\\(\\\\)（）\\\\[\\\\]［］]', 'g'),\r\n    brackets: new RegExp('[\\\\(\\\\)（）]', 'g'),\r\n    syntax: {\r\n        function: new RegExp('[\\\\(（](.*)[\\\\)）](\\\\s*\\\\=\\\\>\\\\s*)[\\\\(（](.*?)[\\\\)）](\\\\s*[\\\\=＝].*?(?:;|$))?'),\r\n        for: new RegExp('[\\\\(（](.*)[）\\\\)](\\\\s*から\\\\s*)[\\\\(（](.*)[）\\\\)](\\\\s*まで\\\\s*)[\\\\(（](.*)[）\\\\)](?:\\\\s*[{｛}])', 'g'),\r\n    },\r\n    comment: {\r\n        line: new RegExp('\\\\/\\\\/.*', 'g'),\r\n        block: new RegExp('/\\\\*|\\\\*/', 'g'),\r\n    },\r\n    string: {\r\n        char: new RegExp(\"\\\\'.*\\\\'\", 'g'),\r\n        charInvalid: new RegExp(\"\\\\'[^\\\\']*?\\n\", 'g'),\r\n        string: new RegExp('\\\\\"', 'g'),\r\n        japanese: new RegExp('[「」]', 'g'),\r\n    },\r\n};\r\n// tokenPatterns.variable = new RegExp(\r\n// \t`((?:[${tokens.separators.replace('\\\\:', '').replace('\\\\s', '')}]|^)\\\\s*(${tokenPatternDefine.name})(?=\\\\s+[^\\\\(\\\\{（｛\\\\s\\\\:]|[^${tokens.char}\\\\(\\\\{（｛\\\\s\\\\:]|\\\\s*$)|${\r\n// \t\ttokenPatternDefine.separator\r\n// \t}${tokenPatternDefine.types}(${tokenPatternDefine.name}))`,\r\n// \t'g'\r\n// );\r\nvar regexpToString = function (regexp) { return regexp.toString().match(/\\/(.*)\\/[igmsuy]*/)[1]; };\r\nvar htmls = /\\<span\\sclass\\=\\\"code\\-\\w+\\\"\\>|\\<\\/span\\>/g;\r\nfunction highlight(code) {\r\n    // ラインコメント\r\n    code = (function () {\r\n        var content = code;\r\n        var indexOffset = 0;\r\n        for (var match = null; (match = tokenPatterns.comment.line.exec(code));) {\r\n            content = content.substr(0, match.index + indexOffset) + \"<span class=\\\"code-comment\\\">\" + match[0] + \"</span>\" + content.substr(match.index + match[0].length + indexOffset);\r\n            indexOffset += 34;\r\n        }\r\n        return content;\r\n    })();\r\n    // ブロックコメント\r\n    code = (function () {\r\n        var content = code;\r\n        var indexOffset = 0;\r\n        var blockStack = null;\r\n        for (var match = null; (match = tokenPatterns.comment.block.exec(code));) {\r\n            if (match[0] === '/*') {\r\n                // start\r\n                if (blockStack === null) {\r\n                    blockStack = match.index;\r\n                }\r\n            }\r\n            else {\r\n                // end\r\n                if (blockStack !== null) {\r\n                    content = content.substr(0, blockStack + indexOffset) + \"<span class=\\\"code-comment\\\">\" + content.substring(blockStack + indexOffset, match.index + 2 + indexOffset) + \"</span>\" + content.substr(match.index + 2 + indexOffset);\r\n                    indexOffset += 34;\r\n                    blockStack = null;\r\n                }\r\n            }\r\n        }\r\n        return content;\r\n    })();\r\n    // 文字 ''\r\n    code = (function () {\r\n        var codeEdited = removeOthers(code, 'comment');\r\n        var content = code;\r\n        var indexOffset = 0;\r\n        for (var match = null; (match = tokenPatterns.string.char.exec(codeEdited));) {\r\n            content = content.substr(0, match.index + indexOffset) + \"<span class=\\\"code-string\\\">\" + match[0] + \"</span>\" + content.substr(match.index + match[0].length + indexOffset);\r\n            indexOffset += 33;\r\n        }\r\n        return content;\r\n    })();\r\n    // 文字列 \"\"\r\n    code = (function () {\r\n        var codeEdited = removeOthers(code, 'comment');\r\n        var content = code;\r\n        var indexOffset = 0;\r\n        var stringStack = null;\r\n        for (var match = null; (match = tokenPatterns.string.string.exec(codeEdited));) {\r\n            if (stringStack !== null) {\r\n                content = content.substring(0, stringStack + indexOffset) + \"<span class=\\\"code-string\\\">\" + content.substring(stringStack + indexOffset, match.index + 1 + indexOffset) + \"</span>\" + content.substr(match.index + 1 + indexOffset);\r\n                indexOffset += 33;\r\n                stringStack = null;\r\n            }\r\n            else {\r\n                stringStack = match.index;\r\n            }\r\n        }\r\n        return content;\r\n    })();\r\n    // 文字列 「」\r\n    code = (function () {\r\n        var codeEdited = removeOthers(code, 'comment');\r\n        var content = code;\r\n        var indexOffset = 0;\r\n        var japaneseStack = null;\r\n        for (var match = null; (match = tokenPatterns.string.japanese.exec(codeEdited));) {\r\n            if (match[0] === '「') {\r\n                if (japaneseStack === null) {\r\n                    japaneseStack = match.index;\r\n                }\r\n            }\r\n            else {\r\n                if (japaneseStack !== null) {\r\n                    content = content.substr(0, japaneseStack + indexOffset) + \"<span class=\\\"code-string\\\">\" + content.substring(japaneseStack + indexOffset, match.index + 1 + indexOffset) + \"</span>\" + content.substr(match.index + 1 + indexOffset);\r\n                    indexOffset += 33;\r\n                    japaneseStack = null;\r\n                }\r\n            }\r\n        }\r\n        return content;\r\n    })();\r\n    // クラス\r\n    code = (function () {\r\n        var codeEdited = removeOthers(code, 'string');\r\n        var content = code;\r\n        var indexOffset = 0;\r\n        var classes = [];\r\n        for (var match = null; (match = tokenPatterns.class.exec(codeEdited));) {\r\n            content = content.substr(0, match.index + match[0].length - match[1].length + indexOffset) + \"<span class=\\\"code-class\\\">\" + match[1] + \"</span>\" + content.substr(match.index + match[0].length + indexOffset);\r\n            classes.push(match[1]);\r\n            indexOffset += 32;\r\n        }\r\n        classes.push('シーン', 'ベクトル3D', 'モデル', '配列', '行列4x4', '文字列', 'カメラ');\r\n        // 型書き換え\r\n        var tokenPatternDefineEdit = tokenPatternDefine;\r\n        tokenPatternDefineEdit.types = tokenPatternDefine.types.replace(tokens.typeKeywords.join('|') + ')', tokens.typeKeywords.concat(classes).join('|') + ')');\r\n        var tokenPatternsEdit = tokenPatterns;\r\n        tokenPatternsEdit.types = new RegExp(regexpToString(tokenPatterns.types).replace(tokens.typeKeywords.join('|') + ')', tokens.typeKeywords.concat(classes).join('|') + ')'), 'g');\r\n        tokenPatternsEdit.variable = new RegExp(regexpToString(tokenPatterns.variable).replace(tokens.typeKeywords.join('|') + ')', tokens.typeKeywords.concat(classes).join('|') + ')'), 'g');\r\n        tokenPatternsEdit.function = new RegExp(regexpToString(tokenPatterns.function).replace(tokens.typeKeywords.join('|') + ')', tokens.typeKeywords.concat(classes).join('|') + ')'), 'g');\r\n        return content;\r\n    })();\r\n    // キーワード\r\n    code = (function () {\r\n        var codeEdited = removeOthers(code, 'string');\r\n        var content = code;\r\n        var indexOffset = 0;\r\n        for (var match = null; (match = tokenPatterns.keyword.exec(codeEdited));) {\r\n            if (tokens.control.includes(match[0])) {\r\n                content = content.substr(0, match.index + indexOffset) + \"<span class=\\\"code-control\\\">\" + match[0] + \"</span>\" + content.substr(match.index + match[0].length + indexOffset);\r\n                indexOffset += 34;\r\n            }\r\n            if (tokens.keywords.includes(match[0])) {\r\n                content = content.substr(0, match.index + indexOffset) + \"<span class=\\\"code-keyword\\\">\" + match[0] + \"</span>\" + content.substr(match.index + match[0].length + indexOffset);\r\n                indexOffset += 34;\r\n            }\r\n        }\r\n        return content;\r\n    })();\r\n    // 関数\r\n    code = (function () {\r\n        var codeEdited = removeOthers(code, 'string');\r\n        var content = code;\r\n        var indexOffset = 0;\r\n        for (var match = null; (match = tokenPatterns.function.exec(codeEdited));) {\r\n            if (!tokens.control.includes(match[3]) && !match[1]) {\r\n                if (tokens.functions.includes(match[3])) {\r\n                    content = content.substr(0, match.index + indexOffset + match[0].length - match[3].length) + \"<span class=\\\"code-keyword\\\">\" + match[3] + \"</span>\" + content.substr(match.index + match[0].length + indexOffset);\r\n                    indexOffset += 34;\r\n                }\r\n                else {\r\n                    content = content.substr(0, match.index + indexOffset + match[0].length - match[3].length) + \"<span class=\\\"code-function\\\">\" + match[3] + \"</span>\" + content.substr(match.index + match[0].length + indexOffset);\r\n                    indexOffset += 35;\r\n                }\r\n            }\r\n        }\r\n        return content;\r\n    })();\r\n    // 変数\r\n    code = (function () {\r\n        var codeEdited = removeOthers(code, 'all');\r\n        var content = code;\r\n        var indexOffset = 0;\r\n        for (var match = null; (match = tokenPatterns.variable.exec(codeEdited));) {\r\n            console.log(match);\r\n            var name_1 = match[4] ? match[4] : match[3];\r\n            if (!tokens.control.concat(tokens.keywords, tokens.typeKeywords).includes(name_1)) {\r\n                content = \"\" + content.substr(0, match.index + indexOffset) + (match[2] ? match[0].slice(0, -match[3].length) : match[0].substr(0, match[0].length - match[4].length)) + \"<span class=\\\"code-variable\\\">\" + name_1 + \"</span>\" + content.substr(match.index + match[0].length + indexOffset);\r\n                indexOffset += 35;\r\n            }\r\n        }\r\n        return content;\r\n    })();\r\n    // 数字\r\n    code = (function () {\r\n        var codeEdited = removeOthers(code, 'all');\r\n        var content = code;\r\n        var indexOffset = 0;\r\n        for (var match = null; (match = tokenPatterns.number.exec(codeEdited));) {\r\n            content = \"\" + content.substr(0, match.index + indexOffset) + match[0].slice(0, -match[1].length) + \"<span class=\\\"code-number\\\">\" + match[1] + \"</span>\" + content.substr(match.index + match[0].length + indexOffset);\r\n            indexOffset += 33;\r\n        }\r\n        return content;\r\n    })();\r\n    // 型\r\n    code = (function () {\r\n        var codeEdited = removeOthers(code, 'all');\r\n        var content = code;\r\n        var indexOffset = 0;\r\n        for (var match = null; (match = tokenPatterns.types.exec(codeEdited));) {\r\n            content = content.substr(0, match.index + indexOffset) + \"<span class=\\\"code-type\\\">\" + match[1] + \"</span>\" + content.substr(match.index + match[1].length + indexOffset);\r\n            indexOffset += 31;\r\n        }\r\n        return content;\r\n    })();\r\n    return code;\r\n}\r\nfunction removeOthers(code, option) {\r\n    var codeEdited = code;\r\n    for (var match = null; (match = htmls.exec(code));) {\r\n        codeEdited = \"\" + codeEdited.substr(0, match.index) + ' '.repeat(match[0].length) + codeEdited.substr(match.index + match[0].length);\r\n    }\r\n    if (option === 'tag')\r\n        return codeEdited;\r\n    var codeNoTags = codeEdited;\r\n    for (var match = null; (match = tokenPatterns.comment.line.exec(codeNoTags));) {\r\n        codeEdited = \"\" + codeEdited.substr(0, match.index) + ' '.repeat(match[0].length) + codeEdited.substr(match.index + match[0].length);\r\n    }\r\n    var blockStack = null;\r\n    for (var match = null; (match = tokenPatterns.comment.block.exec(codeNoTags));) {\r\n        if (match[0] === '/*') {\r\n            // start\r\n            if (!blockStack) {\r\n                blockStack = match.index;\r\n            }\r\n        }\r\n        else {\r\n            // end\r\n            if (blockStack) {\r\n                codeEdited = \"\" + codeEdited.substr(0, blockStack) + ' '.repeat(match.index - blockStack + 2) + codeEdited.substr(match.index + 2);\r\n                blockStack = null;\r\n            }\r\n        }\r\n    }\r\n    if (option === 'comment')\r\n        return codeEdited;\r\n    for (var match = null; (match = tokenPatterns.string.char.exec(codeNoTags));) {\r\n        codeEdited = \"\" + codeEdited.substr(0, match.index) + ' '.repeat(match[0].length) + codeEdited.substr(match.index + match[0].length);\r\n    }\r\n    var stringStack = null;\r\n    for (var match = null; (match = tokenPatterns.string.string.exec(codeNoTags));) {\r\n        if (stringStack) {\r\n            codeEdited = \"\" + codeEdited.substring(0, stringStack) + ' '.repeat(match.index - stringStack + 1) + codeEdited.substr(match.index + 1);\r\n            stringStack = null;\r\n        }\r\n        else {\r\n            stringStack = match.index;\r\n        }\r\n    }\r\n    var japaneseStack = null;\r\n    for (var match = null; (match = tokenPatterns.string.japanese.exec(codeNoTags));) {\r\n        if (match[0] === '「') {\r\n            if (!japaneseStack) {\r\n                japaneseStack = match.index;\r\n            }\r\n        }\r\n        else {\r\n            if (japaneseStack) {\r\n                codeEdited = \"\" + codeEdited.substring(0, japaneseStack) + ' '.repeat(match.index - japaneseStack + 1) + codeEdited.substr(match.index + 1);\r\n                japaneseStack = null;\r\n            }\r\n        }\r\n    }\r\n    if (option === 'string')\r\n        return codeEdited;\r\n    for (var match = null; (match = tokenPatterns.function.exec(codeNoTags));) {\r\n        if (!tokens.control.includes(match[3]) && !match[1])\r\n            codeEdited = \"\" + codeEdited.substr(0, match.index + match[0].length - match[3].length) + ' '.repeat(match[3].length) + codeEdited.substr(match.index + match[0].length);\r\n    }\r\n    if (option === 'all')\r\n        return codeEdited;\r\n    return codeEdited;\r\n}\r\nexports.default = highlight;\r\n\n\n//# sourceURL=webpack://laze-compiler-web/./client/client/js/highlight/highlight.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./client/client/js/docs.ts");
/******/ 	
/******/ })()
;